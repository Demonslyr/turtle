{"version":3,"file":"server.js","sourceRoot":"","sources":["../src/server.ts"],"names":[],"mappings":";;;;;AAAA,mCAAyC;AAEzC,sDAAyE;AACzE,sDAAmC;AACnC,6CAA0C;AAC1C,sDAAmC;AACnC,oDAAiC;AACjC,mDAAqF;AACrF,+CAAkF;AAElF,OAAO,CAAC,EAAE,CAAC,oBAAoB,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,gBAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,6BAA6B,CAAC,CAAC,CAAC;AAEhG,SAAS,UAAU;IACjB,IAAI,+BAAe,EAAE,EAAE;QACrB,gBAAM,CAAC,IAAI,CAAC,sDAAsD,CAAC,CAAC;QACpE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACjB;IACD,gBAAM,CAAC,IAAI,CACT,8FAA8F,CAC/F,CAAC;IACF,6BAAa,EAAE,CAAC;AAClB,CAAC;AACD,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;AAClC,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;AAEjC,KAAK,UAAU,IAAI;IACjB,gBAAM,CAAC,IAAI,CACT,qBAAqB;UACnB,YAAY,gBAAM,CAAC,GAAG,cAAc,gBAAM,CAAC,QAAQ,4BAA4B,gBAAM,CAAC,aAAa,EAAE,CACxG,CAAC;IACF,kBAAY,CAAC,SAAS,CAAC,gBAAM,CAAC,CAAC;IAC/B,IAAI,eAAK,CAAC,gBAAM,CAAC,QAAQ,CAAC,EAAE;QAC1B,MAAM,eAAK,CAAC,gBAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;KAChC;IAED,IAAI;QACF,MAAM,2BAAgB,CAAC,6BAAa,CAAC,CAAC;QACtC,gBAAM,CAAC,IAAI,CAAC,8BAA8B,6BAAa,UAAU,CAAC,CAAC;QACnE,MAAM,WAAW,GAAG,CAAC,MAAM,kCAAwB,CAAC,gBAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,GAAG,OAAO,MAAM,CAAC,CAAC;QACzG,MAAM,kCAAuB,CAAC,gBAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;QAC5D,gBAAM,CAAC,IAAI,CAAC,sCAAsC,WAAW,UAAU,CAAC,CAAC;KAC1E;IAAC,OAAO,GAAG,EAAE;QACZ,gBAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,oCAAoC,CAAC,CAAC;KAC7D;IAED,OAAO,IAAI,EAAE;QACX,IAAI;YACF,MAAM,kBAAK,EAAE,CAAC;SACf;QAAC,OAAO,GAAG,EAAE;YACZ,gBAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,yBAAyB,CAAC,CAAC;SAClD;KACF;AACH,CAAC;AAED,IAAI,EAAE;KACH,IAAI,CAAC,GAAG,EAAE,CAAC,gBAAM,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC;KACvD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,gBAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,+BAA+B,CAAC,CAAC;KACtE,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC","sourcesContent":["import { LoggerDetach } from '@expo/xdl';\n\nimport { findSupportedSdkVersions } from 'turtle/builders/utils/version';\nimport config from 'turtle/config';\nimport { doJob } from 'turtle/jobManager';\nimport logger from 'turtle/logger';\nimport setup from 'turtle/setup';\nimport { checkShouldExit, setShouldExit, turtleVersion } from 'turtle/turtleContext';\nimport { setSupportedSdkVersions, setTurtleVersion } from 'turtle/utils/versions';\n\nprocess.on('unhandledRejection', (err) => logger.error({ err }, 'Unhandled promise rejection'));\n\nfunction handleExit() {\n  if (checkShouldExit()) {\n    logger.warn(`Received termination signal again. Forcing exit now.`);\n    process.exit(1);\n  }\n  logger.warn(\n    `Received termination signal. Will exit after current build. To force exit press Ctrl-C again`,\n  );\n  setShouldExit();\n}\nprocess.on('SIGTERM', handleExit);\nprocess.on('SIGINT', handleExit);\n\nasync function main() {\n  logger.info(\n    'Starting Turtle... '\n    + `NODE_ENV=${config.env}, PLATFORM=${config.platform}, DEPLOYMENT_ENVIRONMENT=${config.deploymentEnv}`,\n  );\n  LoggerDetach.configure(logger);\n  if (setup[config.platform]) {\n    await setup[config.platform]();\n  }\n\n  try {\n    await setTurtleVersion(turtleVersion);\n    logger.info(`Registered Turtle version (${turtleVersion}) in www`);\n    const sdkVersions = (await findSupportedSdkVersions(config.platform)).map((version) => `${version}.0.0`);\n    await setSupportedSdkVersions(config.platform, sdkVersions);\n    logger.info(`Registered supported SDK versions (${sdkVersions}) in www`);\n  } catch (err) {\n    logger.error({ err }, 'Failed to register versions in www');\n  }\n\n  while (true) {\n    try {\n      await doJob();\n    } catch (err) {\n      logger.error({ err }, 'Failed to process a job');\n    }\n  }\n}\n\nmain()\n  .then(() => logger.error('This should never happen...'))\n  .catch((err) => logger.error({ err }, 'Something went terribly wrong'))\n  .then(() => process.exit(1));\n"]}