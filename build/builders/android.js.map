{"version":3,"file":"android.js","sourceRoot":"","sources":["../../src/builders/android.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\n\nimport { AndroidShellApp, ImageUtils } from '@expo/xdl';\nimport fs from 'fs-extra';\nimport _ from 'lodash';\nimport semver from 'semver';\nimport { ANDROID_BUILD_TYPES } from 'turtle/constants';\nimport uuidv4 from 'uuid/v4';\n\nimport getOrCreateCredentials from 'turtle/builders/utils/android/credentials';\nimport { formatShellAppDirectory } from 'turtle/builders/utils/android/workingdir';\nimport * as commonUtils from 'turtle/builders/utils/common';\nimport * as imageHelpers from 'turtle/builders/utils/image';\nimport { resolveExplicitOptIn } from 'turtle/builders/utils/unimodules';\nimport { uploadBuildToS3 } from 'turtle/builders/utils/uploader';\nimport { ensureCanBuildSdkVersion } from 'turtle/builders/utils/version';\nimport config from 'turtle/config';\nimport { IAndroidCredentials, IJob, IJobResult } from 'turtle/job';\nimport logger from 'turtle/logger';\n\nexport default async function buildAndroid(jobData: IJob): Promise<IJobResult> {\n  await ensureCanBuildSdkVersion(jobData);\n  const credentials = await getOrCreateCredentials(jobData);\n  const outputFilePath = await runShellAppBuilder(jobData, credentials);\n\n  const randomHex = uuidv4().replace(/-/g, '');\n  const s3FileExtension = jobData.config.buildType === ANDROID_BUILD_TYPES.APP_BUNDLE ? 'aab' : 'apk';\n  const s3Filename = `${jobData.experienceName}-${randomHex}-signed.${s3FileExtension}`;\n  const s3FileKey = `android/${s3Filename}`;\n  const fakeUploadFilename = s3Filename.replace('/', '__');\n\n  const artifactUrl = await uploadBuildToS3({\n    uploadPath: outputFilePath,\n    s3FileKey,\n    ...config.builder.fakeUpload && {\n      fakeUploadBuildPath:\n        jobData.fakeUploadBuildPath\n        ? jobData.fakeUploadBuildPath\n        : path.join(jobData.fakeUploadDir || config.directories.fakeUploadDir, fakeUploadFilename),\n    },\n  });\n\n  return { artifactUrl };\n}\n\nasync function runShellAppBuilder(\n  jobData: IJob,\n  credentials: IAndroidCredentials,\n): Promise<string> {\n  const { temporaryFilesRoot } = config.directories;\n  await fs.ensureDir(temporaryFilesRoot);\n  const tempShellAppConfigPath = path.join(temporaryFilesRoot, `app-config-${jobData.id}.json`);\n  const tempKeystorePath = path.join(temporaryFilesRoot, `keystore-${jobData.id}.jks`);\n  const configJSON = JSON.stringify(jobData.config);\n  await fs.writeFile(tempShellAppConfigPath, configJSON, { mode: 0o644 });\n  await fs.writeFile(tempKeystorePath, Buffer.from(credentials.keystore, 'base64'), {\n    mode: 0o600,\n  });\n\n  logger.info({ buildPhase: 'starting builder' }, 'Starting build process');\n\n  logger.info(\n    { buildPhase: 'icons setup' },\n    'ImageUtils: setting image functions to alternative sharp implementations',\n  );\n  ImageUtils.setResizeImageFunction(imageHelpers.resizeIconWithSharpAsync);\n  ImageUtils.setGetImageDimensionsFunction(imageHelpers.getImageDimensionsWithSharpAsync);\n\n  const fileExtension = jobData.config.buildType === ANDROID_BUILD_TYPES.APP_BUNDLE ? 'aab' : 'apk';\n  const outputFilePath = path.join(temporaryFilesRoot, `shell-signed-${jobData.id}.${fileExtension}`);\n\n  const { config: jobConfig, manifest, sdkVersion: sdkVersionFromJob } = jobData;\n  const sdkVersion = _.get(manifest, 'sdkVersion', sdkVersionFromJob);\n  const workingDir = formatShellAppDirectory({ sdkVersion });\n\n  // (2019-07-31) We are explicitly choosing to disable this option until we have more\n  // infrastructure/tooling built around optional modules and OTA updates, as right now it's\n  // very easy for developers to break apps in production with optional modules.\n  //\n  // to enable full resolver switch resolveExplicitOptIn to resolveNativeModules\n  logger.info({ buildPhase: 'resolve native modules' }, 'Resolving universal modules dependencies');\n  const enabledModules = semver.satisfies(sdkVersion, '>= 33.0.0')\n    ? await resolveExplicitOptIn(workingDir, _.get(manifest, 'dependencies'))\n    : null;\n\n  try {\n    await AndroidShellApp.createAndroidShellAppAsync({\n      url: commonUtils.getExperienceUrl(jobData.experienceName, jobData.config.publicUrl),\n      sdkVersion,\n      keystore: tempKeystorePath,\n      manifest,\n      alias: credentials.keystoreAlias,\n      keystorePassword: credentials.keystorePassword,\n      keyPassword: credentials.keyPassword,\n      privateConfigFile: tempShellAppConfigPath,\n      releaseChannel: jobConfig.releaseChannel,\n      workingDir,\n      outputFile: outputFilePath,\n      modules: enabledModules,\n      buildType: jobData.config.buildType,\n      buildMode: jobData.config.buildMode,\n    });\n  } catch (err) {\n    commonUtils.logErrorOnce(err);\n    throw err;\n  } finally {\n    if (!config.builder.skipCleanup) {\n      await fs.unlink(tempShellAppConfigPath);\n      await fs.unlink(tempKeystorePath);\n    }\n  }\n\n  return outputFilePath;\n}\n"]}