{"version":3,"file":"adhocBuild.js","sourceRoot":"","sources":["../../../../src/builders/utils/ios/adhocBuild.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\n\nimport spawnAsync from '@expo/spawn-async';\nimport { IosCodeSigning } from '@expo/xdl';\nimport fs from 'fs-extra';\n\nimport * as sqs from 'turtle/aws/sqs';\nimport BuildError, { BuildErrorReason } from 'turtle/builders/BuildError';\nimport { UPDATE_CREDENTIALS } from 'turtle/constants/build';\nimport { IJob } from 'turtle/job';\nimport logger from 'turtle/logger';\nimport { isOffline } from 'turtle/turtleContext';\n\n// tslint:disable-next-line:no-var-requires\nconst travelingFastlane = process.platform === 'darwin' ? require('@expo/traveling-fastlane-darwin')() : null;\n\nasync function prepareAdHocBuildCredentials(job: IJob) {\n  if (process.platform !== 'darwin') {\n    throw new Error('This function should be called only on macOS!');\n  }\n\n  const { bundleIdentifier } = job.config;\n  const {\n    certP12,\n    certPassword,\n    teamId,\n    appleSession,\n    udids,\n    provisioningProfileId,\n  } = job.credentials;\n\n  const certSerialNumber = IosCodeSigning.findP12CertSerialNumber(certP12, certPassword);\n  const args = [\n    ...(provisioningProfileId ? ['--profile-id', provisioningProfileId] : []),\n    teamId,\n    udids!.join(','),\n    bundleIdentifier,\n    certSerialNumber || '__last__',\n  ];\n\n  try {\n    if (provisioningProfileId) {\n      logger.info(\n        `Using ad hoc provisioning profile id: ${provisioningProfileId}`,\n      );\n    }\n\n    const credentials = await runFastlaneAction(\n      travelingFastlane.manageAdHocProvisioningProfile,\n      args,\n      { env: { FASTLANE_SESSION: appleSession } },\n    );\n\n    logger.info('New ad hoc provisioning profile successfully created');\n    job.credentials.provisioningProfile = credentials.provisioningProfile;\n\n    if (!credentials.provisioningProfileUpdateTimestamp) {\n      //  dont need to persist profile because nothing changed\n      return;\n    }\n\n    if (isOffline()) {\n      const provisioningProfilePath = path.join(job.projectDir, `adhoc.mobileprovision`);\n      await fs.writeFile(provisioningProfilePath, Buffer.from(credentials.provisioningProfile, 'base64'));\n      logger.info(`Saved provisioning profile to ${provisioningProfilePath}`);\n    } else {\n      await sqs.sendMessage(job.id, UPDATE_CREDENTIALS, {\n        provisioningProfileId: credentials.provisioningProfileId,\n        provisioningProfile: credentials.provisioningProfile,\n      });\n      logger.info('Ad Hoc provisioning profile sent to storage successfully');\n    }\n  } catch (e) {\n    if (e instanceof BuildError) {\n      logger.error('Apple Session expired! Please authenticate again using expo-cli.');\n    }\n    throw e;\n  }\n}\n\nasync function runFastlaneAction(action: string, args: string[], { env }: any) {\n  const { stderr } = await spawnAsync(\n    action,\n    args,\n    {\n      stdio: ['inherit', 'pipe', 'pipe'],\n      env: { ...process.env, ...env },\n    },\n  );\n  const { result, ...rest } = JSON.parse(stderr.trim());\n  if (result === 'failure') {\n    const { reason, rawDump, type } = rest;\n    let errorMsg = `Reason: ${reason}`;\n    if (rawDump) {\n      errorMsg += `, raw: ${JSON.stringify(rawDump)}`;\n    }\n    if (type === 'session-expired') {\n      throw new BuildError(BuildErrorReason.SESSION_EXPIRED, errorMsg);\n    } else {\n      throw new Error(errorMsg);\n    }\n  } else {\n    return rest;\n  }\n}\n\nexport default prepareAdHocBuildCredentials;\n"]}