{"version":3,"file":"shellAppBuilder.js","sourceRoot":"","sources":["../../../../src/builders/utils/ios/shellAppBuilder.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,gDAAwB;AACxB,gDAAwB;AAExB,mCAAoD;AACpD,gDAAwB;AACxB,oDAAuB;AAGvB,uDAA4D;AAC5D,uDAA4D;AAC5D,oDAAyD;AAEzD,kEAAyC;AAEzC,MAAM,SAAS,GAAG,cAAI,CAAC,SAAS,CAAC,cAAI,CAAC,CAAC;AAExB,KAAK,UAAU,kBAAkB,CAAC,GAAa,EAAE,GAAS;IACvE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAE,iBAAiB,EAAE,GAAG,GAAG,CAAC;IAC3E,MAAM,EAAE,SAAS,EAAE,cAAc,EAAE,GAAG,SAAS,CAAC;IAChD,MAAM,UAAU,GAAG,gBAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,YAAY,EAAE,iBAAiB,CAAC,CAAC;IAEpE,MAAM,SAAS,CAAC,GAAG,CAAC,mBAAmB,EAAE,GAAG,CAAC,cAAc,CAAC,CAAC;IAE7D,eAAM,CAAC,IAAI,CACT,EAAE,UAAU,EAAE,aAAa,EAAE,EAC7B,0EAA0E,CAC3E,CAAC;IACF,gBAAU,CAAC,sBAAsB,CAAC,YAAY,CAAC,wBAAwB,CAAC,CAAC;IACzE,gBAAU,CAAC,6BAA6B,CAAC,YAAY,CAAC,gCAAgC,CAAC,CAAC;IACxF,MAAM,cAAc,GAAG;QACrB,MAAM,EAAE,WAAW;QACnB,IAAI,EAAE,SAAS;QACf,WAAW,EAAE,GAAG,CAAC,UAAU;QAC3B,iBAAiB,EAAE,GAAG,CAAC,MAAM;QAC7B,cAAc,EAAE,cAAI,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,CAAC;QAChD,QAAQ;QACR,MAAM,EAAE,GAAG,CAAC,UAAU;QACtB,OAAO,EAAE,IAAI;QACb,kBAAkB,EAAE,UAAU;KAC/B,CAAC;IACF,IAAI,SAAS,KAAK,uBAAe,CAAC,MAAM,EAAE;QACxC,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE;YAC5B,aAAa,EAAE,cAAI,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,CAAC;SAChD,CAAC,CAAC;KACJ;SAAM;QACL,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE;YAC5B,GAAG,EAAE,WAAW,CAAC,gBAAgB,CAAC,GAAG,CAAC,cAAc,EAAE,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC;YAC3E,cAAc;YACd,UAAU;SACX,CAAC,CAAC;KACJ;IAED,eAAM,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,sBAAsB,EAAE,EAAE,yBAAyB,CAAC,CAAC;IAC/E,OAAO,MAAM,iBAAW,CAAC,4BAA4B,CAAC,cAAc,CAAC,CAAC;AACxE,CAAC;AAtCD,qCAsCC","sourcesContent":["import path from 'path';\nimport util from 'util';\n\nimport { ImageUtils, IosShellApp } from '@expo/xdl';\nimport copy from 'copy';\nimport _ from 'lodash';\n\nimport { IContext } from 'turtle/builders/ios/context';\nimport * as commonUtils from 'turtle/builders/utils/common';\nimport * as imageHelpers from 'turtle/builders/utils/image';\nimport { IOS_BUILD_TYPES } from 'turtle/constants/index';\nimport { IJob } from 'turtle/job';\nimport logger from 'turtle/logger/index';\n\nconst copyAsync = util.promisify(copy);\n\nexport default async function runShellAppBuilder(ctx: IContext, job: IJob): Promise<any> {\n  const { config: jobConfig, manifest, sdkVersion: sdkVersionFromJob } = job;\n  const { buildType, releaseChannel } = jobConfig;\n  const sdkVersion = _.get(manifest, 'sdkVersion', sdkVersionFromJob);\n\n  await copyAsync(ctx.applicationFilesSrc, ctx.baseArchiveDir);\n\n  logger.info(\n    { buildPhase: 'icons setup' },\n    'ImageUtils: setting image functions to alternative sharp implementations',\n  );\n  ImageUtils.setResizeImageFunction(imageHelpers.resizeIconWithSharpAsync);\n  ImageUtils.setGetImageDimensionsFunction(imageHelpers.getImageDimensionsWithSharpAsync);\n  const shellAppParams = {\n    action: 'configure',\n    type: buildType,\n    archivePath: ctx.archiveDir,\n    privateConfigData: job.config,\n    expoSourcePath: path.join(ctx.workingDir, 'ios'),\n    manifest,\n    output: ctx.outputPath,\n    verbose: true,\n    shellAppSdkVersion: sdkVersion,\n  };\n  if (buildType === IOS_BUILD_TYPES.CLIENT) {\n    Object.assign(shellAppParams, {\n      workspacePath: path.join(ctx.workingDir, 'ios'),\n    });\n  } else {\n    Object.assign(shellAppParams, {\n      url: commonUtils.getExperienceUrl(job.experienceName, job.config.publicUrl),\n      releaseChannel,\n      sdkVersion,\n    });\n  }\n\n  logger.info({ buildPhase: 'configuring NSBundle' }, 'configuring NSBundle...');\n  return await IosShellApp.configureAndCopyArchiveAsync(shellAppParams);\n}\n"]}