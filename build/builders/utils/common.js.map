{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../src/builders/utils/common.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,yCAA2B;AAE3B,0DAAmC;AACnC,0DAAmC;AAEnC,SAAgB,gBAAgB,CAAC,cAAsB,EAAE,SAAkB;IACzE,yEAAyE;IACzE,IAAI,SAAS,EAAE;QACb,OAAO,SAAS,CAAC;KAClB;IACD,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,gBAAM,CAAC,GAAG,CAAC;IAChD,OAAO,GAAG,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,cAAc,EAAE,EAAE,CAAC,CAAC;AAClF,CAAC;AAPD,4CAOC;AAED,MAAM,kBAAkB,GAAG,MAAM,CAAC,oBAAoB,CAAC,CAAC;AAExD,SAAgB,YAAY,CAAC,GAAQ;IACnC,IAAI,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE;QAC5B,gBAAM,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACxB,GAAG,CAAC,kBAAkB,CAAC,GAAG,IAAI,CAAC;KAChC;AACH,CAAC;AALD,oCAKC","sourcesContent":["import * as url from 'url';\n\nimport config from 'turtle/config';\nimport logger from 'turtle/logger';\n\nexport function getExperienceUrl(experienceName: string, publicUrl?: string) {\n  // publicUrl is passed in if user wants to build an externally hosted app\n  if (publicUrl) {\n    return publicUrl;\n  }\n  const { protocol, hostname, port } = config.api;\n  return url.format({ protocol, hostname, port, pathname: `/${experienceName}` });\n}\n\nconst alreadyLoggedError = Symbol('alreadyLoggedError');\n\nexport function logErrorOnce(err: any) {\n  if (!err[alreadyLoggedError]) {\n    logger.error(err.stack);\n    err[alreadyLoggedError] = true;\n  }\n}\n"]}