{"version":3,"file":"version.js","sourceRoot":"","sources":["../../../src/builders/utils/version.ts"],"names":[],"mappings":";;;;;AAAA,mCAA0C;AAC1C,wDAA0B;AAC1B,gDAAwB;AAExB,0DAAmC;AAOnC,MAAM,QAAQ,GAAiB,EAAE,CAAC;AAE3B,KAAK,UAAU,wBAAwB,CAAC,GAAS;IACtD,IAAI,gBAAM,CAAC,OAAO,CAAC,kBAAkB,EAAE;QACrC,OAAO;KACR;IAED,MAAM,gBAAgB,GAAG,MAAM,wBAAwB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACtE,MAAM,qBAAqB,GAAG,mBAAa,CAAC,oBAAoB,CAAC,GAAG,CAAC,UAAU,IAAI,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IAC5G,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,qBAAqB,CAAC,EAAE;QACrD,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;KAC7C;AACH,CAAC;AAVD,4DAUC;AAEM,KAAK,UAAU,wBAAwB,CAAC,QAA2B;IACxE,IAAI,QAAQ,CAAC,QAAQ,CAAC,EAAE;QACtB,OAAO,QAAQ,CAAC,QAAQ,CAAC,CAAC;KAC3B;SAAM;QACL,MAAM,cAAc,GAAG,KAAK,CAAC;QAC7B,MAAM,KAAK,GAAG,MAAM,kBAAE,CAAC,OAAO,CAAC,cAAI,CAAC,IAAI,CAAC,gBAAM,CAAC,WAAW,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC;QACnF,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;QACrE,QAAQ,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QACxF,OAAO,QAAQ,CAAC,QAAQ,CAAC,CAAC;KAC3B;AACH,CAAC;AAVD,4DAUC","sourcesContent":["import { ExponentTools } from '@expo/xdl';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport config from 'turtle/config';\nimport { IJob } from 'turtle/job';\n\ninterface IVersionsMap {\n  [platform: string]: number[];\n}\n\nconst versions: IVersionsMap = {};\n\nexport async function ensureCanBuildSdkVersion(job: IJob) {\n  if (config.builder.useLocalWorkingDir) {\n    return;\n  }\n\n  const platformVersions = await findSupportedSdkVersions(job.platform);\n  const targetMajorSdkVersion = ExponentTools.parseSdkMajorVersion(job.sdkVersion || job.manifest.sdkVersion);\n  if (!platformVersions.includes(targetMajorSdkVersion)) {\n    throw new Error(`Unsupported SDK Version!`);\n  }\n}\n\nexport async function findSupportedSdkVersions(platform: 'android' | 'ios'): Promise<number[]> {\n  if (versions[platform]) {\n    return versions[platform];\n  } else {\n    const SDK_DIR_PREFIX = 'sdk';\n    const files = await fs.readdir(path.join(config.directories.workingDir, platform));\n    const sdks = files.filter((file) => file.startsWith(SDK_DIR_PREFIX));\n    versions[platform] = sdks.map((sdk) => parseInt(sdk.substr(SDK_DIR_PREFIX.length), 10));\n    return versions[platform];\n  }\n}\n"]}