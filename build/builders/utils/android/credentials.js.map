{"version":3,"file":"credentials.js","sourceRoot":"","sources":["../../../../src/builders/utils/android/credentials.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,gDAAwB;AAExB,mCAA+C;AAC/C,wDAA0B;AAC1B,qDAA6B;AAC7B,iDAA6B;AAE7B,sDAAsC;AACtC,oDAA4D;AAE5D,6DAAmC;AACnC,0DAAiD;AAEjD,KAAK,UAAU,sBAAsB,CAAC,OAAa;IACjD,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;QACxB,MAAM,CAAC,GAAG,gBAAM,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,qBAAqB,EAAE,CAAC,CAAC;QAC9D,MAAM,WAAW,GAAQ,EAAE,CAAC;QAC5B,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC5B,MAAM,gBAAgB,GAAG,iBAAiB,OAAO,CAAC,EAAE,UAAU,CAAC;QAC/D,WAAW,CAAC,gBAAgB,GAAG,YAAM,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAC1D,WAAW,CAAC,WAAW,GAAG,YAAM,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QACrD,WAAW,CAAC,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACnF,MAAM,cAAc,GAClB,aAAG,CAAC,OAAO,EAAE,0BAA0B,CAAC;eACrC,aAAG,CAAC,OAAO,EAAE,uBAAuB,CAAC,CAAC;QAC3C,IAAI,CAAC,cAAc,EAAE;YACnB,MAAM,IAAI,KAAK,CACb,2GAA2G,CAC5G,CAAC;SACH;QAED,MAAM,wBAAkB,CAAC,cAAc,CACrC;YACE,YAAY,EAAE,gBAAgB;YAC9B,gBAAgB,EAAE,WAAW,CAAC,gBAAgB;YAC9C,WAAW,EAAE,WAAW,CAAC,WAAW;YACpC,QAAQ,EAAE,WAAW,CAAC,aAAa;SACpC,EACD,cAAc,CACf,CAAC;QAEF,WAAW,CAAC,QAAQ,GAAG,CAAC,MAAM,kBAAE,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAChF,CAAC,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;QACxC,IAAI,yBAAS,EAAE,EAAE;YACf,MAAM,mBAAmB,GAAG,cAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,OAAO,CAAC,cAAc,MAAM,CAAC,CAAC;YAC3F,MAAM,kBAAE,CAAC,IAAI,CAAC,gBAAgB,EAAE,mBAAmB,CAAC,CAAC;YACrD,CAAC,CAAC,IAAI,CAAC,6BAA6B,mBAAmB,EAAE,CAAC,CAAC;YAC3D,CAAC,CAAC,IAAI,CAAC,sBAAsB,WAAW,CAAC,gBAAgB,EAAE,CAAC,CAAC;YAC7D,CAAC,CAAC,IAAI,CAAC,mBAAmB,WAAW,CAAC,aAAa,EAAE,CAAC,CAAC;YACvD,CAAC,CAAC,IAAI,CAAC,iBAAiB,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC;YACnD,CAAC,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;SAC9C;aAAM;YACL,MAAM,GAAG,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,EAAE,0BAAkB,EAAE;gBACpD,GAAG,WAAW;aACf,CAAC,CAAC;YACH,CAAC,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;SACjD;QACD,MAAM,kBAAE,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;QAClC,OAAO,WAAW,CAAC;KACpB;IAED,OAAO,OAAO,CAAC,WAAkC,CAAC;AACpD,CAAC;AAED,kBAAe,sBAAsB,CAAC","sourcesContent":["import path from 'path';\n\nimport { AndroidCredentials } from '@expo/xdl';\nimport fs from 'fs-extra';\nimport get from 'lodash/get';\nimport uuidv4 from 'uuid/v4';\n\nimport * as sqs from 'turtle/aws/sqs';\nimport { UPDATE_CREDENTIALS } from 'turtle/constants/build';\nimport { IAndroidCredentials, IJob } from 'turtle/job';\nimport logger from 'turtle/logger';\nimport { isOffline } from 'turtle/turtleContext';\n\nasync function getOrCreateCredentials(jobData: IJob): Promise<IAndroidCredentials> {\n  if (!jobData.credentials) {\n    const l = logger.child({ buildPhase: 'generating keystore' });\n    const credentials: any = {};\n    l.info('Creating keystore');\n    const keystoreFilename = `/tmp/keystore-${jobData.id}.tmp.jks`;\n    credentials.keystorePassword = uuidv4().replace(/-/g, '');\n    credentials.keyPassword = uuidv4().replace(/-/g, '');\n    credentials.keystoreAlias = Buffer.from(jobData.experienceName).toString('base64');\n    const androidPackage =\n      get(jobData, 'manifest.android.package')\n      || get(jobData, 'config.androidPackage');\n    if (!androidPackage) {\n      throw new Error(\n        'Android package name is not set in the app manifest (please update app.json if you\\'re using turtle-cli).',\n      );\n    }\n\n    await AndroidCredentials.createKeystore(\n      {\n        keystorePath: keystoreFilename,\n        keystorePassword: credentials.keystorePassword,\n        keyPassword: credentials.keyPassword,\n        keyAlias: credentials.keystoreAlias,\n      },\n      androidPackage,\n    );\n\n    credentials.keystore = (await fs.readFile(keystoreFilename)).toString('base64');\n    l.info('Keystore created successfully');\n    if (isOffline()) {\n      const projectKeystorePath = path.join(jobData.projectDir, `${jobData.experienceName}.jks`);\n      await fs.copy(keystoreFilename, projectKeystorePath);\n      l.info(`Saved created keystore to ${projectKeystorePath}`);\n      l.info(`Keystore password: ${credentials.keystorePassword}`);\n      l.info(`Keystore alias: ${credentials.keystoreAlias}`);\n      l.info(`Key password: ${credentials.keyPassword}`);\n      l.info(`Please keep these credentials safe`);\n    } else {\n      await sqs.sendMessage(jobData.id, UPDATE_CREDENTIALS, {\n        ...credentials,\n      });\n      l.info('Keystore sent to storage successfully');\n    }\n    await fs.unlink(keystoreFilename);\n    return credentials;\n  }\n\n  return jobData.credentials as IAndroidCredentials;\n}\n\nexport default getOrCreateCredentials;\n"]}