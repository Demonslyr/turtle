{"version":3,"file":"context.js","sourceRoot":"","sources":["../../../src/builders/ios/context.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\n\nimport { ExponentTools, IosShellApp } from '@expo/xdl';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { formatShellAppDirectory } from 'turtle/builders/utils/ios/workingdir';\nimport config from 'turtle/config';\nimport { IOS_BUILD_TYPES, PLATFORMS } from 'turtle/constants/index';\nimport { IJob } from 'turtle/job';\n\nexport interface IContext {\n  appDir: string;\n  appUUID: string;\n  archiveDir: string;\n  baseArchiveDir: string;\n  buildDir: string;\n  fakeUploadBuildPath?: string;\n  outputPath: string;\n  provisioningProfilePath: string;\n  provisioningProfileDir: string;\n  s3FileKey?: string;\n  tempCertPath: string;\n  uploadPath: string;\n  workingDir: string;\n  workspacePath: string;\n  applicationFilesSrc: string;\n}\n\nconst { EXPOKIT_APP, EXPONENT_APP } = IosShellApp;\n\nexport function createBuilderContext(job: IJob): IContext {\n  const { join } = path;\n  const appUUID = uuidv4();\n  const {\n    manifest: {\n      sdkVersion: sdkVersionFromManifest = null,\n    } = {},\n    sdkVersion: sdkVersionFromJob,\n    config: { buildType },\n  } = job;\n\n  const sdkVersion = sdkVersionFromJob || sdkVersionFromManifest;\n  const workingDir = formatShellAppDirectory({ sdkVersion, buildType: buildType! });\n  const majorSdkVersion = ExponentTools.parseSdkMajorVersion(sdkVersion);\n\n  const context: any = {\n    appDir: join(config.directories.temporaryFilesRoot, appUUID),\n    appUUID,\n    workingDir,\n  };\n  context.buildDir = join(context.appDir, 'build');\n  context.provisioningProfileDir = join(context.appDir, 'provisioning');\n  context.provisioningProfilePath = join(\n    context.provisioningProfileDir,\n    `${appUUID}.mobileprovision`,\n  );\n  context.tempCertPath = join(context.appDir, 'cert.p12');\n  context.baseArchiveDir = join(context.appDir, 'archive');\n\n  if (buildType === IOS_BUILD_TYPES.CLIENT) {\n    context.applicationFilesSrc = join(\n      workingDir,\n      'expo-client-build',\n      '**',\n      '*',\n    );\n  } else {\n    context.applicationFilesSrc = join(\n      workingDir,\n      'shellAppBase-builds',\n      buildType as string,\n      '**',\n      '*',\n    );\n  }\n\n  if (buildType === IOS_BUILD_TYPES.ARCHIVE) {\n    context.outputPath = join(context.appDir, 'archive.xcarchive');\n    context.uploadPath = join(context.buildDir, 'archive.ipa');\n    context.archiveDir = join(\n      context.baseArchiveDir,\n      'Release',\n      `${EXPOKIT_APP}.xcarchive`,\n      'Products',\n      'Applications',\n      `${EXPOKIT_APP}.app`,\n    );\n    if (majorSdkVersion >= 33) {\n      context.workspacePath = path.join(\n        workingDir,\n        'shellAppWorkspaces',\n        'default',\n        'ios',\n        `${EXPOKIT_APP}.xcworkspace`,\n      );\n    } else {\n      context.workspacePath = path.join(\n        workingDir,\n        'shellAppWorkspaces',\n        'ios',\n        'default',\n        `${EXPOKIT_APP}.xcworkspace`,\n      );\n    }\n\n  } else if (buildType === IOS_BUILD_TYPES.CLIENT) {\n    context.outputPath = join(context.appDir, 'archive.xcarchive');\n    context.uploadPath = join(context.buildDir, 'archive.ipa');\n    context.archiveDir = join(\n      context.baseArchiveDir,\n      `${EXPONENT_APP}.xcarchive`,\n      'Products',\n      'Applications',\n      `${EXPONENT_APP}.app`,\n    );\n    context.workspacePath = path.join(\n      workingDir,\n      'ios',\n      `${EXPONENT_APP}.xcworkspace`,\n    );\n  } else if (buildType === IOS_BUILD_TYPES.SIMULATOR) {\n    context.outputPath = join(context.appDir, 'archive.tar.gz');\n    context.uploadPath = join(context.appDir, 'archive.tar.gz');\n    context.archiveDir = join(\n      context.baseArchiveDir,\n      'Release',\n      `${EXPOKIT_APP}.app`,\n    );\n  }\n\n  const s3FileExtension = buildType === IOS_BUILD_TYPES.SIMULATOR ? 'tar.gz' : 'ipa';\n  const s3Filename = `${job.experienceName}-${appUUID}-${buildType}.${s3FileExtension}`;\n  if (config.builder.fakeUpload) {\n    const fakeUploadFilename = s3Filename.replace('/', '__');\n    context.fakeUploadBuildPath = job.fakeUploadBuildPath\n      ? job.fakeUploadBuildPath\n      : join(job.fakeUploadDir || config.directories.fakeUploadDir, fakeUploadFilename);\n  } else {\n    context.s3FileKey = join(PLATFORMS.IOS, s3Filename);\n  }\n\n  return context;\n}\n"]}