{"version":3,"file":"archive.js","sourceRoot":"","sources":["../../../src/builders/ios/archive.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,mCAA8D;AAC9D,oDAAuB;AAGvB,4CAA4D;AAC5D,yDAAwD;AACxD,gEAA+D;AAC/D,mFAA2E;AAE3E,+DAAyC;AAE1B,KAAK,UAAU,YAAY,CAAC,GAAa,EAAE,GAAS;IACjE,IAAI,YAAY,CAAC;IACjB,IAAI;QACF,YAAY,GAAG,MAAM,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC1C,MAAM,EAAE,WAAW,EAAE,GAAG,GAAG,CAAC;QAC5B,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,GAAG,WAAwD,CAAC;QAC3F,MAAM,QAAQ,CAAC,UAAU,CAAC,GAAG,EAAE,EAAE,YAAY,EAAE,YAAY,CAAC,IAAI,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC,CAAC;QAC3F,MAAM,QAAQ,GAAG,MAAM,yBAAkB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACpD,MAAM,eAAe,CAAC,GAAG,EAAE,GAAG,EAAE,YAAY,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;KAC9D;IAAC,OAAO,GAAG,EAAE;QACZ,qBAAY,CAAC,GAAG,CAAC,CAAC;QAClB,MAAM,GAAG,CAAC;KACX;YAAS;QACR,IAAI,YAAY,EAAE;YAChB,MAAM,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;SAC/C;KACF;AACH,CAAC;AAjBD,+BAiBC;AAED,KAAK,UAAU,eAAe,CAAC,GAAa,EAAE,GAAS,EAAE,YAAoB,EAAE,QAAa;IAC1F,MAAM,CAAC,GAAG,eAAM,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,0BAA0B,EAAE,CAAC,CAAC;IACnE,CAAC,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;IAEnC,MAAM,EACJ,WAAW,EAAE,EAAE,mBAAmB,EAAE,YAAY,EAAE,MAAM,EAAE,EAC1D,MAAM,EAAE,EAAE,gBAAgB,EAAE,0BAA0B,EAAE,GACzD,GAAG,GAAG,CAAC;IAER,MAAM,4BAA4B,GAAG,gBAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,sBAAsB,CAAC,CAAC;IAC7E,MAAM,gBAAgB,GAAG,0BAA0B,IAAI,4BAA4B,CAAC;IAEpF,MAAM,EAAE,uBAAuB,EAAE,GAAG,GAAG,CAAC;IACxC,MAAM,SAAS,CAAC,uBAAuB,CAAC,uBAAuB,EAAE,mBAA6B,CAAC,CAAC;IAChG,CAAC,CAAC,IAAI,CAAC,8CAA8C,CAAC,CAAC;IAEvD,MAAM,UAAU,GAAG,mBAAgB,CAAC;QAClC,YAAY;QACZ,uBAAuB;QACvB,OAAO,EAAE,GAAG,CAAC,OAAO;QACpB,QAAQ,EAAE,GAAG,CAAC,YAAY;QAC1B,YAAY;QACZ,MAAM,EAAE,MAAM;QACd,gBAAgB;QAChB,aAAa,EAAE,GAAG,CAAC,aAAa;QAChC,QAAQ;KACT,CAAC,CAAC;IACH,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;IAEzB,CAAC,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;AAC1C,CAAC","sourcesContent":["import { IosIPABuilder as createIPABuilder } from '@expo/xdl';\nimport _ from 'lodash';\n\nimport { IContext } from 'turtle/builders/ios/context';\nimport { logErrorOnce } from 'turtle/builders/utils/common';\nimport * as fileUtils from 'turtle/builders/utils/file';\nimport * as keychain from 'turtle/builders/utils/ios/keychain';\nimport runShellAppBuilder from 'turtle/builders/utils/ios/shellAppBuilder';\nimport { IJob } from 'turtle/job';\nimport logger from 'turtle/logger/index';\n\nexport default async function buildArchive(ctx: IContext, job: IJob) {\n  let keychainInfo;\n  try {\n    keychainInfo = await keychain.create(ctx);\n    const { credentials } = job;\n    const { certP12, certPassword } = credentials as { certP12: string; certPassword: string };\n    await keychain.importCert(ctx, { keychainPath: keychainInfo.path, certP12, certPassword });\n    const manifest = await runShellAppBuilder(ctx, job);\n    await buildAndSignIPA(ctx, job, keychainInfo.path, manifest);\n  } catch (err) {\n    logErrorOnce(err);\n    throw err;\n  } finally {\n    if (keychainInfo) {\n      await keychain.remove(ctx, keychainInfo.path);\n    }\n  }\n}\n\nasync function buildAndSignIPA(ctx: IContext, job: IJob, keychainPath: string, manifest: any) {\n  const l = logger.child({ buildPhase: 'building and signing IPA' });\n  l.info('building and signing IPA');\n\n  const {\n    credentials: { provisioningProfile, certPassword, teamId },\n    config: { bundleIdentifier: bundleIdentifierFromConfig },\n  } = job;\n\n  const bundleIdentifierFromManifest = _.get(manifest, 'ios.bundleIdentifier');\n  const bundleIdentifier = bundleIdentifierFromConfig || bundleIdentifierFromManifest;\n\n  const { provisioningProfilePath } = ctx;\n  await fileUtils.writeBase64ToBinaryFile(provisioningProfilePath, provisioningProfile as string);\n  l.info('saved provisioning profile to temporary path');\n\n  const ipaBuilder = createIPABuilder({\n    keychainPath,\n    provisioningProfilePath,\n    appUUID: ctx.appUUID,\n    certPath: ctx.tempCertPath,\n    certPassword,\n    teamID: teamId,\n    bundleIdentifier,\n    workspacePath: ctx.workspacePath,\n    manifest,\n  });\n  await ipaBuilder.build();\n\n  l.info(`done building and signing IPA`);\n}\n"]}