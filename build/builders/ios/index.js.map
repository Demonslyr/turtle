{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/builders/ios/index.ts"],"names":[],"mappings":";;;;;AAAA,wDAA0B;AAC1B,uDAA+B;AAE/B,wDAAuD;AACvD,uCAA6E;AAC7E,4DAA2D;AAC3D,4CAA4D;AAC5D,yEAAgF;AAChF,gDAAiE;AACjE,8CAAyE;AACzE,0DAAmC;AACnC,+CAAmD;AAGpC,KAAK,UAAU,UAAU,CAAC,GAAS;IAChD,IAAI,GAAG,CAAC,MAAM,CAAC,SAAS,KAAK,2BAAe,CAAC,MAAM,EAAE;QACnD,MAAM,kCAAwB,CAAC,GAAG,CAAC,CAAC;KACrC;IAED,MAAM,GAAG,GAAG,8BAAoB,CAAC,GAAG,CAAC,CAAC;IAEtC,IAAI;QACF,MAAM,WAAW,CAAC,GAAG,CAAC,CAAC;QAEvB,MAAM,EAAE,SAAS,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAEjC,IAAI,SAAS,KAAK,2BAAe,CAAC,MAAM,EAAE;YACxC,MAAM,oBAA4B,CAAC,GAAG,CAAC,CAAC;SACzC;QAED,IAAI,CAAC,2BAAe,CAAC,OAAO,EAAE,2BAAe,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,SAAU,CAAC,EAAE;YAC1E,MAAM,iBAAY,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;SAC9B;aAAM,IAAI,SAAS,KAAK,2BAAe,CAAC,SAAS,EAAE;YAClD,MAAM,mBAAc,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;SAChC;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,+BAA+B,SAAS,EAAE,CAAC,CAAC;SAC7D;QAED,MAAM,WAAW,GAAG,MAAM,0BAAe,CAAC,GAAG,CAAC,CAAC;QAC/C,OAAO,EAAE,WAAW,EAAE,CAAC;KACxB;IAAC,OAAO,GAAG,EAAE;QACZ,qBAAY,CAAC,GAAG,CAAC,CAAC;QAClB,MAAM,GAAG,CAAC;KACX;YAAS;QACR,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC;KACpB;AACH,CAAC;AAhCD,6BAgCC;AAED,KAAK,UAAU,WAAW,CAAC,GAAa;IACtC,KAAK,MAAM,GAAG,IAAI,gBAAgB,CAAC,GAAG,CAAC,EAAE;QACvC,MAAM,kBAAE,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACxB,MAAM,kBAAE,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;KAC5B;AACH,CAAC;AAED,KAAK,UAAU,OAAO,CAAC,GAAa;IAClC,IAAI,gBAAM,CAAC,OAAO,CAAC,WAAW,EAAE;QAC9B,OAAO;KACR;IACD,MAAM,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAW,EAAE,EAAE,CAAC,kBAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAChF,CAAC;AAED,MAAM,gBAAgB,GAAG,CAAC,GAAa,EAAE,EAAE,CACzC,MAAM,CAAC,MAAM,CAAC,cAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC,CAAa,CAAC","sourcesContent":["import fs from 'fs-extra';\nimport pick from 'lodash/pick';\n\nimport buildArchive from 'turtle/builders/ios/archive';\nimport { createBuilderContext, IContext } from 'turtle/builders/ios/context';\nimport buildSimulator from 'turtle/builders/ios/simulator';\nimport { logErrorOnce } from 'turtle/builders/utils/common';\nimport prepareAdHocBuildCredentials from 'turtle/builders/utils/ios/adhocBuild';\nimport { uploadBuildToS3 } from 'turtle/builders/utils/uploader';\nimport { ensureCanBuildSdkVersion } from 'turtle/builders/utils/version';\nimport config from 'turtle/config';\nimport { IOS_BUILD_TYPES } from 'turtle/constants';\nimport { IJob, IJobResult } from 'turtle/job';\n\nexport default async function iosBuilder(job: IJob): Promise<IJobResult> {\n  if (job.config.buildType !== IOS_BUILD_TYPES.CLIENT) {\n    await ensureCanBuildSdkVersion(job);\n  }\n\n  const ctx = createBuilderContext(job);\n\n  try {\n    await initBuilder(ctx);\n\n    const { buildType } = job.config;\n\n    if (buildType === IOS_BUILD_TYPES.CLIENT) {\n      await prepareAdHocBuildCredentials(job);\n    }\n\n    if ([IOS_BUILD_TYPES.ARCHIVE, IOS_BUILD_TYPES.CLIENT].includes(buildType!)) {\n      await buildArchive(ctx, job);\n    } else if (buildType === IOS_BUILD_TYPES.SIMULATOR) {\n      await buildSimulator(ctx, job);\n    } else {\n      throw new Error(`Unsupported iOS build type: ${buildType}`);\n    }\n\n    const artifactUrl = await uploadBuildToS3(ctx);\n    return { artifactUrl };\n  } catch (err) {\n    logErrorOnce(err);\n    throw err;\n  } finally {\n    await cleanup(ctx);\n  }\n}\n\nasync function initBuilder(ctx: IContext) {\n  for (const dir of getTemporaryDirs(ctx)) {\n    await fs.ensureDir(dir);\n    await fs.chmod(dir, 0o755);\n  }\n}\n\nasync function cleanup(ctx: IContext) {\n  if (config.builder.skipCleanup) {\n    return;\n  }\n  await Promise.all(getTemporaryDirs(ctx).map((dir: string) => fs.remove(dir)));\n}\n\nconst getTemporaryDirs = (ctx: IContext) =>\n  Object.values(pick(ctx, ['appDir', 'provisioningProfileDir'])) as string[];\n"]}