{"version":3,"file":"buildersConfig.js","sourceRoot":"","sources":["../../src/metrics/buildersConfig.ts"],"names":[],"mappings":";;;;;AAAA,6DAAqC;AACrC,iEAAyC;AACzC,uDAA+B;AAE/B,uDAAmC;AACnC,uCAAoD;AACpD,gDAAwD;AACxD,oDAAoF;AAEpF,MAAM,gBAAgB,GAAG,GAAG,EAAE,CAAC,qBAAqB,CAAC;AACrD,MAAM,oBAAoB,GAAG,CAAC,IAAsB,EAAE,EAAE,CAAC,GAAG,gBAAgB,EAAE,IAAI,IAAI,EAAE,CAAC;AACzF,MAAM,aAAa,GAAG,CAAC,IAAsB,EAAE,EAAE,CAAC,QAAQ,IAAI,EAAE,CAAC;AAElD,KAAK,UAAU,mBAAmB;IAC/C,IAAI,aAAa,CAAC;IAClB,IAAI;QACF,aAAa,GAAG,MAAM,oCAAuB,EAAE,CAAC;KACjD;IAAC,OAAO,GAAG,EAAE;QACZ,gBAAM,CAAC,IAAI,CAAC,iGAAiG,CAAC,CAAC;QAC/G,OAAO;KACR;IAED,MAAM,YAAY,GAAG,MAAM,0BAAe,EAAE,CAAC;IAC7C,MAAM,mBAAmB,GAAG,YAAY,KAAK,IAAI,CAAC,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,YAAY,CAAC;IAExF,MAAM,aAAa,GAAG,mBAAS,CAC7B,iBAAO,CAAS,cAAI,CAAC,aAAa,EAAE,mBAAmB,CAAC,CAAC,EACzD,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAChB,CAAC;IAEF,MAAM,UAAU,GAAG,gBAAgB,EAAE,CAAC;IAEtC,MAAM,kBAAkB,GAAG,aAAa,CAAC,6BAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACvE,MAAM,gBAAgB,GAAG,aAAa,CAAC,6BAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnE,MAAM,oBAAoB,GAAG,aAAa,CAAC,6BAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAE3E,MAAM,SAAS,GAAG,aAAa,CAAC,6BAAgB,CAAC,MAAM,CAAC,CAAC;IACzD,MAAM,gBAAgB,GAAG,oBAAoB,CAAC,6BAAgB,CAAC,MAAM,CAAC,CAAC;IACvE,gBAAM,CAAC,KAAK,CACV,WAAW,UAAU,IAAI,kBAAkB,KAAK,SAAS,MAAM,gBAAgB,IAAI,kBAAkB,aAAa,CACnH,CAAC;IACF,MAAM,oBAAU,CAAC,UAAU,EAAE,kBAAkB,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;IAC9D,MAAM,oBAAU,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,CAAC;IAEvD,MAAM,OAAO,GAAG,aAAa,CAAC,6BAAgB,CAAC,IAAI,CAAC,CAAC;IACrD,MAAM,cAAc,GAAG,oBAAoB,CAAC,6BAAgB,CAAC,IAAI,CAAC,CAAC;IACnE,gBAAM,CAAC,KAAK,CACV,WAAW,UAAU,IAAI,gBAAgB,KAAK,OAAO,MAAM,cAAc,IAAI,gBAAgB,aAAa,CAC3G,CAAC;IACF,MAAM,oBAAU,CAAC,UAAU,EAAE,gBAAgB,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAC1D,MAAM,oBAAU,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;IAEnD,MAAM,WAAW,GAAG,aAAa,CAAC,6BAAgB,CAAC,QAAQ,CAAC,CAAC;IAC7D,MAAM,kBAAkB,GAAG,oBAAoB,CAAC,6BAAgB,CAAC,QAAQ,CAAC,CAAC;IAC3E,gBAAM,CAAC,KAAK,CACV,WAAW,UAAU,IAAI,oBAAoB,KAAK,WAAW,IAAI;UAC/D,IAAI,kBAAkB,IAAI,oBAAoB,aAAa,CAC9D,CAAC;IACF,MAAM,oBAAU,CAAC,UAAU,EAAE,oBAAoB,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;IAClE,MAAM,oBAAU,CAAC,kBAAkB,EAAE,oBAAoB,CAAC,CAAC;AAC7D,CAAC;AA/CD,sCA+CC","sourcesContent":["import groupBy from 'lodash/groupBy';\nimport mapValues from 'lodash/mapValues';\nimport take from 'lodash/take';\n\nimport logger from 'turtle/logger';\nimport { sendMetric } from 'turtle/metrics/datadog';\nimport { getReplicaCount } from 'turtle/utils/metadata';\nimport { getLabeledConfiguration, TurtleModeLabels } from 'turtle/utils/priorities';\n\nconst createMetricName = () => `turtle.replicaCount`;\nconst createModeMetricName = (mode: TurtleModeLabels) => `${createMetricName()}.${mode}`;\nconst createModeTag = (mode: TurtleModeLabels) => `mode:${mode}`;\n\nexport default async function sendConfigToDatadog() {\n  let configuration;\n  try {\n    configuration = await getLabeledConfiguration();\n  } catch (err) {\n    logger.warn('Failed to send the builders configuration to Datadog because it couldn\\'t be fetched from Redis');\n    return;\n  }\n\n  const replicaCount = await getReplicaCount();\n  const currentReplicaCount = replicaCount === null ? configuration.length : replicaCount;\n\n  const replicaCounts = mapValues(\n    groupBy<string>(take(configuration, currentReplicaCount)),\n    (i) => i.length,\n  );\n\n  const metricName = createMetricName();\n\n  const normalReplicaCount = replicaCounts[TurtleModeLabels.Normal] || 0;\n  const highReplicaCount = replicaCounts[TurtleModeLabels.High] || 0;\n  const highOnlyReplicaCount = replicaCounts[TurtleModeLabels.HighOnly] || 0;\n\n  const normalTag = createModeTag(TurtleModeLabels.Normal);\n  const normalMetricName = createModeMetricName(TurtleModeLabels.Normal);\n  logger.debug(\n    `Sending ${metricName}=${normalReplicaCount} (${normalTag}), ${normalMetricName}=${normalReplicaCount} to Datadog`,\n  );\n  await sendMetric(metricName, normalReplicaCount, [normalTag]);\n  await sendMetric(normalMetricName, normalReplicaCount);\n\n  const highTag = createModeTag(TurtleModeLabels.High);\n  const highMetricName = createModeMetricName(TurtleModeLabels.High);\n  logger.debug(\n    `Sending ${metricName}=${highReplicaCount} (${highTag}), ${highMetricName}=${highReplicaCount} to Datadog`,\n  );\n  await sendMetric(metricName, highReplicaCount, [highTag]);\n  await sendMetric(highMetricName, highReplicaCount);\n\n  const highOnlyTag = createModeTag(TurtleModeLabels.HighOnly);\n  const highOnlyMetricName = createModeMetricName(TurtleModeLabels.HighOnly);\n  logger.debug(\n    `Sending ${metricName}=${highOnlyReplicaCount} (${highOnlyTag}),`\n    + ` ${highOnlyMetricName}=${highOnlyReplicaCount} to Datadog`,\n  );\n  await sendMetric(metricName, highOnlyReplicaCount, [highOnlyTag]);\n  await sendMetric(highOnlyMetricName, highOnlyReplicaCount);\n}\n"]}