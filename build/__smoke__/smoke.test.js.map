{"version":3,"file":"smoke.test.js","sourceRoot":"","sources":["../../src/__smoke__/smoke.test.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs-extra';\n\nimport nock from 'nock';\n\nimport config from 'turtle/config';\nimport { PLATFORMS } from 'turtle/constants';\nimport * as jobManager from 'turtle/jobManager';\nimport logger from 'turtle/logger';\n\njest.mock('../builders/utils/uploader.ts', () => ({\n  uploadBuildToS3: jest.fn(() => {\n    logger.debug('Faking uploading build');\n    return 'legit_path';\n  }),\n}));\n\nasync function performSmokeTest(recording: string) {\n  jest.setTimeout(60 * 60 * 1000);\n\n  // @ts-ignore\n  const fixtureExists = await fs.exists(recording);\n  if (fixtureExists) {\n    logger.info('Fixture exists, test will use existing one.');\n\n    nock.load(recording);\n    mockLogs();\n    mockSQS();\n    logger.info('Loading fixture');\n  } else {\n    nock.recorder.rec({\n      dont_print: true,\n      output_objects: true,\n      enable_reqheaders_recording: false,\n    });\n  }\n\n  await jobManager.doJob();\n  if (!fixtureExists) {\n    await fs.writeFile(recording, JSON.stringify(nock.recorder.play()));\n  }\n}\n\nfunction mockLogs() {\n  /*\n    Match log push messages. Seperate matcher, because it needs `persist` option\n    due to fact that it's being called variable amount times.\n  */\n  return nock('https://exp-shell-app-assets.s3.us-west-1.amazonaws.com')\n    .persist()\n    .put((uri: string) => {\n      return uri.indexOf('/logs') >= 0;\n    })\n    .reply(200);\n}\n\nfunction mockSQS() {\n  return nock('https://sqs.us-west-2.amazonaws.com')\n    .persist()\n    .post(() => true)\n    .reply(200);\n}\n\nfunction mockFinish() {\n  // A separate matcher for the final request to ensure build was completed successfully\n\n  return nock('https://sqs.us-west-2.amazonaws.com:443')\n    .post('/', (body: any) => {\n      const keys = Object.keys(body);\n      if (keys.includes('MessageBody')) {\n        const mb = JSON.parse(body.MessageBody);\n        if (mb.status === 'finished') {\n          return true;\n        } else if (mb.status === 'errored') {\n          fail('Build ended with error');\n        }\n      }\n      return false;\n    })\n    .reply(200);\n}\n\nasync function testPlatform(platform: string) {\n  process.env.PLATFORM = platform;\n\n  const utils = require('turtle/aws/utils');\n  utils.QUEUE_URL = jest.fn((priority) => {\n    return (config.sqs.queues as any)[priority][platform];\n  });\n\n  nock.cleanAll();\n  nock.enableNetConnect();\n\n  const finishMock = mockFinish();\n  const fixtureLocation = `src/__smoke__/fixtures/${platform}/recording.json`;\n  await performSmokeTest(fixtureLocation);\n  expect(finishMock.isDone());\n  nock.disableNetConnect();\n}\n\ntest('Android builds', async () => {\n  await testPlatform(PLATFORMS.ANDROID);\n});\n\ntest('iOS builds', async () => {\n  await testPlatform(PLATFORMS.IOS);\n});\n"]}