{"version":3,"file":"s3.js","sourceRoot":"","sources":["../../../src/logger/streams/s3.ts"],"names":[],"mappings":"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","sourcesContent":["import EventEmitter from 'events';\nimport path from 'path';\n\nimport fs from 'fs-extra';\nimport _ from 'lodash';\n\nimport { uploadFile } from 'turtle/aws/s3';\nimport config from 'turtle/config';\nimport { IJob } from 'turtle/job';\n\nexport default function create() {\n  const s3 = new S3Stream();\n  return {\n    type: 'raw',\n    stream: s3,\n    reemitErrorEvents: true,\n    level: config.logger.level,\n  };\n}\n\nclass S3Stream extends EventEmitter {\n  private s3Url: string | null = null;\n  private lastFlush: number | null = null;\n  private filePath: string | null = null;\n  private fileHandle: number | null = null;\n  private uploadingPromise: Promise<void> | null = null;\n  private uploadingPromiseResolveFn: any;\n  private waitingOnPromise: boolean = false;\n\n  public async init(job: IJob) {\n    this.s3Url = `logs/${job.experienceName}/${job.id}`;\n    const dir = config.directories.tempS3LogsDir;\n    const exists = await fs.pathExists(dir);\n    if (!exists) {\n      await fs.mkdir(dir);\n    }\n    this.filePath = path.join(dir, job.id);\n    this.fileHandle = await fs.open(this.filePath, 'w+', 0o660);\n    this.lastFlush = null;\n\n    const res = await this.flush() as any;\n    return res.Location;\n  }\n\n  public async cleanup() {\n    await this.flush(true);\n    await fs.close(this.fileHandle as number);\n    this.fileHandle = null;\n    this.waitingOnPromise = false;\n  }\n\n  public flush(force = false) {\n    if (force || !this.lastFlush) {\n      return this.flushInternal();\n    }\n    const now = Date.now();\n    if (now - this.lastFlush > config.logger.intervalMs) {\n      return this.flushInternal();\n    }\n  }\n\n  public write(rec: any) {\n    if (!this.fileHandle) {\n      return;\n    }\n    fs\n      .write(this.fileHandle as number, `${JSON.stringify(rec)}\\n`)\n      .then(() => {\n        this.flush();\n      });\n  }\n\n  private flushInternal(): any {\n    this.lastFlush = Date.now();\n    if (!this.uploadingPromise) {\n      this.uploadingPromise = new Promise((res) => {\n        this.uploadingPromiseResolveFn = res;\n      });\n      return this\n        .upload()\n        .then((result) => {\n          setTimeout(() => this.uploadingPromiseResolveFn(), 0);\n          return result;\n        });\n    } else {\n      if (this.waitingOnPromise) {\n        return;\n      }\n      this.waitingOnPromise = true;\n      return this.uploadingPromise\n        .then(() => {\n          this.waitingOnPromise = false;\n          this.uploadingPromise = null;\n          return this.flushInternal();\n        });\n    }\n  }\n\n  private upload() {\n    return uploadFile({\n      srcPath: this.filePath as string,\n      key: this.s3Url as string,\n    });\n  }\n}\n"]}