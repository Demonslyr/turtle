{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/logger/streams/index.ts"],"names":[],"mappings":";;;;;AAAA,2DAAmC;AAEnC,sDAA8D;AAC9D,wDAAgE;AAChE,8CAAsD;AACtD,sDAA8D;AAC9D,uDAAiD;AAajD,SAAS,cAAc;IACrB,IAAI,yBAAS,EAAE,EAAE;QACf,OAAO;YACL,MAAM,EAAE,iBAAmB,EAAE;SAC9B,CAAC;KACH;SAAM;QACL,MAAM,UAAU,GAAG;YACjB,MAAM,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE;YAClC,MAAM,EAAE,gBAAkB,EAAE;YAC5B,EAAE,EAAE,YAAc,EAAE;YACpB,MAAM,EAAE,gBAAkB,EAAE;SAC7B,CAAC;QACF,OAAO,gBAAM,CAAC,UAAU,CAAe,CAAC;KACzC;AACH,CAAC;AAED,MAAM,OAAO,GAAG,cAAc,EAAE,CAAC;AAEjC,kBAAe,OAAO,CAAC","sourcesContent":["import pickBy from 'lodash/pickBy';\n\nimport createGCloudStream from 'turtle/logger/streams/gcloud';\nimport createOfflineStream from 'turtle/logger/streams/offline';\nimport createS3Stream from 'turtle/logger/streams/s3';\nimport createSentryStream from 'turtle/logger/streams/sentry';\nimport { isOffline } from 'turtle/turtleContext';\n\ninterface IStream {\n  stream: any;\n  type?: string;\n  level?: string;\n  reemitErrorEvents?: boolean;\n}\n\ninterface IStreamMap {\n  [key: string]: IStream;\n}\n\nfunction prepareStreams(): IStreamMap {\n  if (isOffline()) {\n    return {\n      stdout: createOfflineStream(),\n    };\n  } else {\n    const allStreams = {\n      stdout: { stream: process.stdout },\n      gcloud: createGCloudStream(),\n      s3: createS3Stream(),\n      sentry: createSentryStream(),\n    };\n    return pickBy(allStreams) as IStreamMap;\n  }\n}\n\nconst streams = prepareStreams();\n\nexport default streams;\n"]}