{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/logger/index.ts"],"names":[],"mappings":";;;;;AAAA,oDAA4B;AAE5B,uDAAmC;AAEnC,wDAA4C;AAM5C,MAAM,MAAM;IAIV,YAAY,YAAkB;QAC5B,IAAI,CAAC,YAAY,GAAG,YAAY,IAAI,gBAAM,CAAC,YAAY,CAAC;YACtD,IAAI,EAAE,QAAQ;YACd,KAAK,EAAE,gBAAM,CAAC,MAAM,CAAC,KAAK;YAC1B,QAAQ,EAAE,gBAAM,CAAC,QAAQ;YACzB,WAAW,EAAE,gBAAM,CAAC,cAAc;YAClC,GAAG,gBAAM,CAAC,aAAa,IAAI,EAAE,WAAW,EAAE,gBAAM,CAAC,aAAa,EAAE;YAChE,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,iBAAO,CAAC;SAChC,CAAC,CAAC;QACH,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC;IACzC,CAAC;IAEM,KAAK,CAAC,UAAU,CAAC,GAAS;QAC/B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;YAC3C,KAAK,EAAE,GAAG,CAAC,EAAE;YACb,cAAc,EAAE,GAAG,CAAC,cAAc;SACnC,CAAC,CAAC;QACH,MAAM,KAAK,GAAG,MAAM,iBAAO,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAChD,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,KAAK,CAAC,OAAO;QAClB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC;QACvC,MAAM,iBAAO,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;IACpC,CAAC;IAEM,KAAK,CAAC,GAAG,GAAU;QACxB,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,GAAG,GAAU;QACxB,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;IACnC,CAAC;IAEM,IAAI,CAAC,GAAG,GAAU;QACvB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;IAClC,CAAC;IAEM,IAAI,CAAC,GAAG,GAAU;QACvB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;IAClC,CAAC;IAEM,KAAK,CAAC,GAAG,GAAU;QACxB,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,GAAG,GAAU;QACxB,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,MAAqB;QAChC,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACnD,OAAO,IAAI,MAAM,CAAC,SAAS,CAAC,CAAC;IAC/B,CAAC;IAED,kCAAkC;IAC3B,UAAU,CAAC,MAAqB;QACrC,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAC5B,CAAC;CACF;AAED,kBAAe,IAAI,MAAM,EAAE,CAAC","sourcesContent":["import bunyan from 'bunyan';\n\nimport config from 'turtle/config';\nimport { IJob } from 'turtle/job';\nimport streams from 'turtle/logger/streams';\n\ninterface ILoggerFields {\n  [key: string]: string | number;\n}\n\nclass Logger {\n  private parentLogger: any;\n  private currentLogger: any;\n\n  constructor(parentLogger?: any) {\n    this.parentLogger = parentLogger || bunyan.createLogger({\n      name: 'turtle',\n      level: config.logger.level,\n      platform: config.platform,\n      serializers: bunyan.stdSerializers,\n      ...config.deploymentEnv && { environment: config.deploymentEnv },\n      streams: Object.values(streams),\n    });\n    this.currentLogger = this.parentLogger;\n  }\n\n  public async initForJob(job: IJob) {\n    this.currentLogger = this.parentLogger.child({\n      jobID: job.id,\n      experienceName: job.experienceName,\n    });\n    const s3Url = await streams.s3.stream.init(job);\n    return s3Url;\n  }\n\n  public async cleanup() {\n    this.currentLogger = this.parentLogger;\n    await streams.s3.stream.cleanup();\n  }\n\n  public trace(...all: any[]) {\n    this.currentLogger.trace(...all);\n  }\n\n  public debug(...all: any[]) {\n    this.currentLogger.debug(...all);\n  }\n\n  public info(...all: any[]) {\n    this.currentLogger.info(...all);\n  }\n\n  public warn(...all: any[]) {\n    this.currentLogger.warn(...all);\n  }\n\n  public error(...all: any[]) {\n    this.currentLogger.error(...all);\n  }\n\n  public fatal(...all: any[]) {\n    this.currentLogger.fatal(...all);\n  }\n\n  public child(fields: ILoggerFields) {\n    const newLogger = this.currentLogger.child(fields);\n    return new Logger(newLogger);\n  }\n\n  // only for backward compatibility\n  public withFields(fields: ILoggerFields) {\n    return this.child(fields);\n  }\n}\n\nexport default new Logger();\n"]}