{"version":3,"file":"android.js","sourceRoot":"","sources":["../../../../src/bin/commands/build/android.ts"],"names":[],"mappings":";;;;;AAAA,wDAA0B;AAG1B,kEAAgF;AAChF,iDAA+D;AAC/D,wEAA8C;AAC9C,kDAA6C;AAE7C,kBAAe,CAAC,OAAY,EAAE,uBAA4B,EAAE,EAAE;IAC5D,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC;IAC/D,uBAAuB,CAAC,OAAO,CAAC,CAAC;IACjC,OAAO;SACJ,KAAK,CAAC,IAAI,CAAC;SACX,MAAM,CACL,2BAA2B,EAC3B,4GAA4G;UAC1G,+CAA+C,CAClD;SACA,MAAM,CAAC,0BAA0B,EAAE,gBAAgB,CAAC;SACpD,MAAM,CACL,mBAAmB,EACnB,+BAA+B,EAC/B,qBAAqB,EACrB,YAAY,CACb;SACA,MAAM,CACL,mBAAmB,EACnB,8BAA8B,EAC9B,oBAAoB,EACpB,SAAS,CACV;SACA,WAAW,CACV,kGAAkG;UAChG,0CAA0C,CAC7C;SACA,WAAW,CACV,6BAAmB,CAAC;QAClB,OAAO;QACP,OAAO;QACP,kBAAkB;QAClB,OAAO,EAAP,iBAAO;QACP,QAAQ,EAAE,qBAAS,CAAC,OAAO;QAC3B,EAAE,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC;KACxB,CAAC,CACH,CAAC;AACN,CAAC,CAAC;AAEF,MAAM,kBAAkB,GAAG,KAAK,EAAE,GAAQ,EAAE,EAAE;IAC5C,MAAM,EAAE,YAAY,EAAE,aAAa,EAAE,GAAG,GAAG,CAAC;IAC5C,MAAM,gBAAgB,GAAG,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC;IACpE,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC;IAE1D,MAAM,oBAAoB,GAAG,YAAY,IAAI,aAAa,IAAI,gBAAgB,IAAI,WAAW,CAAC;IAC9F,MAAM,gBAAgB,GAAG,YAAY,IAAI,aAAa,IAAI,gBAAgB,IAAI,WAAW,CAAC;IAC1F,IAAI,CAAC,gBAAgB,EAAE;QACrB,IAAI,oBAAoB,EAAE;YACxB,MAAM,IAAI,2CAAoB,CAC5B,qGAAqG,CACtG,CAAC;SACH;aAAM;YACL,OAAO,IAAI,CAAC;SACb;KACF;SAAM;QACL,OAAO;YACL,QAAQ,EAAE,CAAC,MAAM,kBAAE,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC;YAC9D,aAAa;YACb,gBAAgB;YAChB,WAAW;SACZ,CAAC;KACH;AACH,CAAC,CAAC","sourcesContent":["import fs from 'fs-extra';\nimport _ from 'lodash';\n\nimport { ErrorWithCommandHelp } from 'turtle/bin/commands/ErrorWithCommandHelp';\nimport { createBuilderAction } from 'turtle/bin/utils/builder';\nimport builder from 'turtle/builders/android';\nimport { PLATFORMS } from 'turtle/constants';\n\nexport default (program: any, setCommonCommandOptions: any) => {\n  const command = program.command('build:android [project-dir]');\n  setCommonCommandOptions(command);\n  command\n    .alias('ba')\n    .option(\n      '--keystore-path <app.jks>',\n      'path to your Keystore (please provide Keystore password and Key password as EXPO_ANDROID_KEYSTORE_PASSWORD'\n      + ' and EXPO_ANDROID_KEY_PASSWORD env variables)',\n    )\n    .option('--keystore-alias <alias>', 'keystore Alias')\n    .option(\n      '-t --type <build>',\n      'type of build: app-bundle|apk',\n      /^(app-bundle|apk)$/i,\n      'app-bundle',\n    )\n    .option(\n      '-m --mode <build>',\n      'type of build: debug|release',\n      /^(debug|release)$/i,\n      'release',\n    )\n    .description(\n      'Build a standalone APK or App Bundle for your project, either signed and ready for submission to'\n      + ' the Google Play Store or in debug mode.',\n    )\n    .asyncAction(\n      createBuilderAction({\n        program,\n        command,\n        prepareCredentials,\n        builder,\n        platform: PLATFORMS.ANDROID,\n        os: ['darwin', 'linux'],\n      }),\n    );\n};\n\nconst prepareCredentials = async (cmd: any) => {\n  const { keystorePath, keystoreAlias } = cmd;\n  const keystorePassword = process.env.EXPO_ANDROID_KEYSTORE_PASSWORD;\n  const keyPassword = process.env.EXPO_ANDROID_KEY_PASSWORD;\n\n  const someCredentialsExist = keystorePath || keystoreAlias || keystorePassword || keyPassword;\n  const credentialsExist = keystorePath && keystoreAlias && keystorePassword && keyPassword;\n  if (!credentialsExist) {\n    if (someCredentialsExist) {\n      throw new ErrorWithCommandHelp(\n        'Please provide all required credentials - Keystore (with password), Keystore alias and Key password',\n      );\n    } else {\n      return null;\n    }\n  } else {\n    return {\n      keystore: (await fs.readFile(keystorePath)).toString('base64'),\n      keystoreAlias,\n      keystorePassword,\n      keyPassword,\n    };\n  }\n};\n"]}