{"version":3,"file":"ios.js","sourceRoot":"","sources":["../../../../src/bin/commands/build/ios.ts"],"names":[],"mappings":";;;;;AAAA,wDAA0B;AAG1B,kEAAgF;AAChF,iDAA+D;AAC/D,gEAA0C;AAC1C,kDAA8D;AAE9D,kBAAe,CAAC,OAAY,EAAE,uBAA4B,EAAE,EAAE;IAC5D,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC;IAC3D,uBAAuB,CAAC,OAAO,CAAC,CAAC;IACjC,OAAO;SACJ,KAAK,CAAC,IAAI,CAAC;SACX,MAAM,CACL,mBAAmB,EACnB,kCAAkC,EAClC,wBAAwB,EACxB,SAAS,CACV;SACA,MAAM,CAAC,0BAA0B,EAAE,eAAe,CAAC;SACnD,MAAM,CACL,4BAA4B,EAC5B,gHAAgH,CACjH;SACA,MAAM,CAAC,gDAAgD,EAAE,mCAAmC,CAAC;SAC7F,WAAW,CACV,kGAAkG,CACnG;SACA,WAAW,CACV,6BAAmB,CAAC;QAClB,OAAO;QACP,OAAO;QACP,kBAAkB;QAClB,OAAO,EAAP,aAAO;QACP,QAAQ,EAAE,qBAAS,CAAC,GAAG;QACvB,EAAE,EAAE,QAAQ;KACb,CAAC,CACH,CAAC;AACN,CAAC,CAAC;AAEF,MAAM,kBAAkB,GAAG,KAAK,EAAE,GAAQ,EAAE,EAAE;IAC5C,IAAI,GAAG,CAAC,IAAI,KAAK,2BAAe,CAAC,OAAO,EAAE;QACxC,OAAO,IAAI,CAAC;KACb;IAED,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,uBAAuB,EAAE,GAAG,GAAG,CAAC;IAC7D,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC;IAE5D,MAAM,gBAAgB,GACpB,MAAM,IAAI,WAAW,IAAI,YAAY,IAAI,uBAAuB,CAAC;IAEnE,IAAI,CAAC,gBAAgB,EAAE;QACrB,MAAM,IAAI,2CAAoB,CAC5B,yCAAyC;cACvC,wFAAwF,CAC3F,CAAC;KACH;IAED,OAAO;QACL,MAAM;QACN,OAAO,EAAE,CAAC,MAAM,kBAAE,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC;QAC5D,YAAY;QACZ,mBAAmB,EAAE,CAAC,MAAM,kBAAE,CAAC,QAAQ,CAAC,uBAAuB,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC;KACrF,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import fs from 'fs-extra';\nimport _ from 'lodash';\n\nimport { ErrorWithCommandHelp } from 'turtle/bin/commands/ErrorWithCommandHelp';\nimport { createBuilderAction } from 'turtle/bin/utils/builder';\nimport builder from 'turtle/builders/ios';\nimport { IOS_BUILD_TYPES, PLATFORMS } from 'turtle/constants';\n\nexport default (program: any, setCommonCommandOptions: any) => {\n  const command = program.command('build:ios [project-dir]');\n  setCommonCommandOptions(command);\n  command\n    .alias('bi')\n    .option(\n      '-t --type <build>',\n      'type of build: archive|simulator',\n      /^(archive|simulator)$/i,\n      'archive',\n    )\n    .option('--team-id <apple-teamId>', 'Apple Team ID')\n    .option(\n      '--dist-p12-path <dist.p12>',\n      'path to your Distribution Certificate P12 (please provide password as EXPO_IOS_DIST_P12_PASSWORD env variable)',\n    )\n    .option('--provisioning-profile-path <.mobileprovision>', 'path to your Provisioning Profile')\n    .description(\n      'Build a standalone IPA for your project, signed and ready for submission to the Apple App Store.',\n    )\n    .asyncAction(\n      createBuilderAction({\n        program,\n        command,\n        prepareCredentials,\n        builder,\n        platform: PLATFORMS.IOS,\n        os: 'darwin',\n      }),\n    );\n};\n\nconst prepareCredentials = async (cmd: any) => {\n  if (cmd.type !== IOS_BUILD_TYPES.ARCHIVE) {\n    return null;\n  }\n\n  const { teamId, distP12Path, provisioningProfilePath } = cmd;\n  const certPassword = process.env.EXPO_IOS_DIST_P12_PASSWORD;\n\n  const credentialsExist =\n    teamId && distP12Path && certPassword && provisioningProfilePath;\n\n  if (!credentialsExist) {\n    throw new ErrorWithCommandHelp(\n      'Please provide all required credentials'\n      + '- Apple Team ID, Distribution Certificate P12 (with password) and Provisioning Profile',\n    );\n  }\n\n  return {\n    teamId,\n    certP12: (await fs.readFile(distP12Path)).toString('base64'),\n    certPassword,\n    provisioningProfile: (await fs.readFile(provisioningProfilePath)).toString('base64'),\n  };\n};\n"]}