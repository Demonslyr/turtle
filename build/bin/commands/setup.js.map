{"version":3,"file":"setup.js","sourceRoot":"","sources":["../../../src/bin/commands/setup.ts"],"names":[],"mappings":";;;;;AAAA,oDAAuB;AAEvB,iEAAgF;AAChF,iEAAgF;AAChF,2DAA2C;AAC3C,+CAA6C;AAC7C,0DAAmC;AAEnC,MAAM,CAAC,GAAG,gBAAM,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,wBAAwB,EAAE,CAAC,CAAC;AAEjE,SAAS,kBAAkB,CAAC,QAAgB,EAAE,EAAW;IACvD,OAAO,CAAC,OAAY,EAAE,EAAE;QACtB,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,SAAS,QAAQ,EAAE,CAAC,CAAC;QACrD,MAAM,mBAAmB,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QACxC,OAAO;aACJ,KAAK,CAAC,IAAI,mBAAmB,EAAE,CAAC;aAChC,WAAW,CAAC,kCAAkC,gBAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,mBAAmB,CAAC;aACxF,MAAM,CACL,6BAA6B,EAC7B,sDAAsD,CACvD;aACA,WAAW,CAAC,KAAK,EAAE,GAAQ,EAAE,EAAE,CAAC,MAAM,WAAW,CAAC,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;IACpF,CAAC,CAAC;AACJ,CAAC;AAED,KAAK,UAAU,WAAW,CAAC,OAAY,EAAE,GAAQ,EAAE,QAAgB,EAAE,EAAW;IAC9E,IAAI;QACF,IAAI,EAAE,IAAI,OAAO,CAAC,QAAQ,KAAK,EAAE,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,4FAA4F,CAAC,CAAC;SAC/G;QAED,MAAM,EAAE,UAAU,EAAE,GAAG,GAAG,CAAC;QAC3B,MAAM,eAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QAClC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;KAC1B;IAAC,OAAO,GAAG,EAAE;QACZ,gBAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,mCAAmC,QAAQ,SAAS,CAAC,CAAC;QAC5E,IAAI,GAAG,YAAY,2CAAoB,EAAE;YACvC,GAAG,CAAC,IAAI,EAAE,CAAC;SACZ;aAAM,IAAI,GAAG,YAAY,2CAAoB,EAAE;YAC9C,OAAO,CAAC,IAAI,EAAE,CAAC;SAChB;QACD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACjB;AACH,CAAC;AAED,kBAAe;IACb,GAAG,EAAE,kBAAkB,CAAC,qBAAS,CAAC,GAAG,EAAE,QAAQ,CAAC;IAChD,OAAO,EAAE,kBAAkB,CAAC,qBAAS,CAAC,OAAO,CAAC;CAC/C,CAAC","sourcesContent":["import _ from 'lodash';\n\nimport { ErrorWithCommandHelp } from 'turtle/bin/commands/ErrorWithCommandHelp';\nimport { ErrorWithProgramHelp } from 'turtle/bin/commands/ErrorWithProgramHelp';\nimport setup from 'turtle/bin/setup/setup';\nimport { PLATFORMS } from 'turtle/constants';\nimport logger from 'turtle/logger';\n\nconst l = logger.child({ buildPhase: 'setting up environment' });\n\nfunction createSetupCommand(platform: string, os?: string) {\n  return (program: any) => {\n    const command = program.command(`setup:${platform}`);\n    const platformFirstLetter = platform[0];\n    command\n      .alias(`s${platformFirstLetter}`)\n      .description(`Setup environment for building ${_.capitalize(platform)} standalone apps.`)\n      .option(\n        '--sdk-version <sdk-version>',\n        'version of Expo SDK shell app to download (optional)',\n      )\n      .asyncAction(async (cmd: any) => await setupAction(program, cmd, platform, os));\n  };\n}\n\nasync function setupAction(program: any, cmd: any, platform: string, os?: string) {\n  try {\n    if (os && process.platform !== os) {\n      throw new Error('We don\\'t support running standalone app builds for this platform on your operating system');\n    }\n\n    const { sdkVersion } = cmd;\n    await setup(platform, sdkVersion);\n    l.info('it\\'s all set!');\n  } catch (err) {\n    logger.error({ err }, `Failed to setup environment for ${platform} builds`);\n    if (err instanceof ErrorWithCommandHelp) {\n      cmd.help();\n    } else if (err instanceof ErrorWithProgramHelp) {\n      program.help();\n    }\n    process.exit(1);\n  }\n}\n\nexport default {\n  ios: createSetupCommand(PLATFORMS.IOS, 'darwin'),\n  android: createSetupCommand(PLATFORMS.ANDROID),\n};\n"]}