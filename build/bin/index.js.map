{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/bin/index.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\n\nimport { LoggerDetach, ModuleVersion } from '@expo/xdl';\nimport program, { Command } from 'commander';\nimport fs from 'fs-extra';\n\nimport * as commands from 'turtle/bin/commands';\nimport logger from 'turtle/logger';\n\nconst { name, version } = JSON.parse(fs.readFileSync(path.join(__dirname, '../../package.json'), 'utf-8'));\n\nconst ModuleVersionChecker = ModuleVersion.createModuleVersionChecker(name, version);\n\nLoggerDetach.configure(logger);\n\nCommand.prototype.asyncAction = function asyncAction(asyncFn: (...asyncFnArgs: any[]) => void): Command {\n  return this.action(async (...args) => {\n    try {\n      await checkForUpdateAsync();\n    } catch (err) {\n      logger.warn({ err }, 'Failed to check for turtle-cli update.');\n    }\n    return await asyncFn(...args);\n  });\n};\n\nexport function run(programName: string) {\n  runAsync(programName).catch((err) => {\n    logger.error({ err }, 'Uncaught Error');\n    process.exit(1);\n  });\n}\n\nasync function runAsync(programName: string) {\n  program.version(version);\n  Object.values(commands).forEach((command) => registerCommand(program, command));\n  program.parse(process.argv);\n\n  const subCommand = process.argv[2];\n  if (subCommand) {\n    const commandNames = program.commands.reduce((acc: string[], command: any) => {\n      acc.push(command._name);\n      const alias = command._alias;\n      if (alias) {\n        acc.push(alias);\n      }\n      return acc;\n    }, []);\n    if (!commandNames.includes(subCommand)) {\n      logger.error(\n        `\"${subCommand}\" is not an ${programName} command. See \"${programName} --help\" for the full list of commands.`,\n      );\n    }\n  } else {\n    program.help();\n  }\n}\n\nconst registerCommand = (prog: any, command: any) => command(prog);\n\nasync function checkForUpdateAsync() {\n  const { updateIsAvailable, current, latest } = await ModuleVersionChecker.checkAsync();\n  if (updateIsAvailable) {\n    logger.warn(\n      `There is a new version of ${name} available (${latest}).\nYou are currently using ${name} ${current}\nRun \\`npm install -g ${name}\\` to get the latest version`,\n    );\n  }\n}\n"]}