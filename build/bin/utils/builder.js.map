{"version":3,"file":"builder.js","sourceRoot":"","sources":["../../../src/bin/utils/builder.ts"],"names":[],"mappings":"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","sourcesContent":["import _url from 'url';\n\nimport { ExponentTools } from '@expo/xdl';\nimport _ from 'lodash';\nimport uuid from 'uuid';\n\nimport { ErrorWithCommandHelp } from 'turtle/bin/commands/ErrorWithCommandHelp';\nimport { ErrorWithProgramHelp } from 'turtle/bin/commands/ErrorWithProgramHelp';\nimport setup from 'turtle/bin/setup/setup';\nimport * as ProjectUtils from 'turtle/bin/utils/project';\nimport * as UserUtils from 'turtle/bin/utils/user';\nimport { getExperienceUrl } from 'turtle/builders/utils/common';\nimport logger from 'turtle/logger';\nimport { sanitizeJob } from 'turtle/validator';\n\nexport function createBuilderAction({\n  program,\n  command,\n  prepareCredentials,\n  builder,\n  platform,\n  os,\n}: any) {\n  return async (projectDirArg: string, cmd: any) => {\n    try {\n      const osList = [];\n      if (Array.isArray(os)) {\n        osList.push(...os);\n      } else {\n        osList.push(os);\n      }\n      if (osList.length && !osList.includes(process.platform)) {\n        throw new Error('We don\\'t support running standalone app builds for this platform on your operating system');\n      }\n\n      if (cmd.buildDir && cmd.output) {\n        throw new ErrorWithCommandHelp(\n          'You can\\'t provide both --build-dir and --output parameters, please choose one',\n        );\n      }\n\n      const userData = {\n        username: cmd.username || process.env.EXPO_USERNAME,\n        password: cmd.password || process.env.EXPO_PASSWORD,\n      };\n\n      if (userData.username || userData.password) {\n        if (userData.username && userData.password) {\n          await UserUtils.ensureUserLoggedIn(userData);\n        } else {\n          throw new ErrorWithCommandHelp('You must provide both Expo username and password');\n        }\n      } else if (!cmd.publicUrl) {\n        throw new ErrorWithCommandHelp(\n          'You must provide your Expo username and password unless you specify --public-url to your project manifest.',\n        );\n      }\n\n      if (cmd.publicUrl) {\n        const parsedPublicUrl = _url.parse(cmd.publicUrl);\n        if (parsedPublicUrl.protocol !== 'https:') {\n          throw new ErrorWithCommandHelp('--public-url is invalid - only HTTPS urls are supported');\n        }\n      }\n\n      const args = {\n        releaseChannel: cmd.releaseChannel || 'default',\n        buildType: cmd.type,\n        buildMode: cmd.mode,\n        username: userData.username || 'anonymous',\n        projectDir: ProjectUtils.resolveAbsoluteDir(projectDirArg),\n        publicUrl: cmd.publicUrl,\n      };\n\n      const appJSON = await ProjectUtils.loadAppJSON(projectDirArg, cmd.config);\n      const sdkVersion = _.get(appJSON, 'expo.sdkVersion');\n      await setup(platform, sdkVersion);\n      const credentials = await prepareCredentials(cmd);\n      const rawJob = {\n        ...await buildJobObject(platform, appJSON, args, credentials),\n        ...cmd.buildDir && { fakeUploadDir: ProjectUtils.resolveAbsoluteDir(cmd.buildDir) },\n        ...cmd.output && { fakeUploadBuildPath: ProjectUtils.resolveAbsoluteDir(cmd.output) },\n      };\n      const job = await sanitizeJob(rawJob);\n      await builder(job);\n    } catch (err) {\n      logger.error({ err }, 'Failed to build standalone app');\n      if (err instanceof ErrorWithCommandHelp) {\n        command.help();\n      } else if (err instanceof ErrorWithProgramHelp) {\n        program.help();\n      }\n      process.exit(1);\n    }\n  };\n}\n\nconst buildJobObject = async (\n  platform: 'android' | 'ios',\n  appJSON: any,\n  { releaseChannel, buildType, buildMode, username, publicUrl, projectDir }: any,\n  credentials: any,\n) => {\n  const experienceName = `@${_.get(appJSON, 'expo.owner', username)}/${_.get(appJSON, 'expo.slug')}`;\n  const job = {\n    config: {\n      ..._.get(appJSON, `expo.${platform}.config`, {}),\n      buildType,\n      ...(platform === 'android' ? { buildMode } : {}),\n      releaseChannel,\n      ...(platform === 'ios' ? { bundleIdentifier: _.get(appJSON, 'expo.ios.bundleIdentifier') } : {}),\n      ...(platform === 'android' ? { androidPackage: _.get(appJSON, 'expo.android.package') } : {}),\n      publicUrl,\n    },\n    id: uuid.v4(),\n    platform,\n    projectDir,\n    sdkVersion: _.get(appJSON, 'expo.sdkVersion'),\n    experienceName,\n    ...(credentials && { credentials }),\n  };\n  const url = getExperienceUrl(job.experienceName, job.config.publicUrl);\n\n  const manifest = await ExponentTools.getManifestAsync(url, {\n    'Exponent-SDK-Version': _.get(appJSON, 'expo.sdkVersion'),\n    'Exponent-Platform': platform,\n    'Expo-Release-Channel': releaseChannel,\n    'Accept': 'application/expo+json,application/json',\n  });\n\n  return { ...job, manifest };\n};\n"]}