{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/bin/setup/android/index.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport util from 'util';\n\nimport { ExponentTools } from '@expo/xdl';\nimport fs from 'fs-extra';\nimport _which from 'which';\n\nimport ensureAndroidSDKIsPresent from 'turtle/bin/setup/android/sdk';\nimport { checkSystem, ensureShellAppIsPresent } from 'turtle/bin/setup/utils/common';\nimport { IToolDefinition } from 'turtle/bin/setup/utils/toolsDetector';\nimport { formatShellAppDirectory } from 'turtle/builders/utils/android/workingdir';\nimport config from 'turtle/config';\nimport { PLATFORMS } from 'turtle/constants';\nimport logger from 'turtle/logger';\n\nconst which = util.promisify(_which);\nconst JAVA_REQUIRED_VERSION = 8;\nconst REQUIRED_TOOLS: IToolDefinition[] = [\n  {\n    command: 'bash',\n    missingDescription: 'Please install bash',\n  },\n  {\n    command: 'javac',\n    missingDescription:\n      `Please install JDK 8 - keep in mind that other versions are not supported by Android`,\n    testFn: async () => {\n      const { status, stdout, stderr } = await ExponentTools.spawnAsyncThrowError(\n        'java',\n        ['-version'],\n        { stdio: 'pipe' },\n      );\n      if (stdout.match(/no java runtime present/i)) {\n        return false;\n      }\n\n      const matchResult = stderr.match(/.*version \"(.*)\"/);\n      if (matchResult) {\n        const [, currentFullJavaVersion] = matchResult;\n        const javaMajorVersionPosition = currentFullJavaVersion.startsWith('1.') ? 1 : 0;\n        const javaMajorVersion = Number(currentFullJavaVersion.split('.')[javaMajorVersionPosition]);\n        if (javaMajorVersion !== JAVA_REQUIRED_VERSION) {\n          throw new Error(`You're on Java ${currentFullJavaVersion}, please install version ${JAVA_REQUIRED_VERSION}`);\n        }\n      } else {\n        logger.warn(`Couldn't find Java version number, assuming you're on Java ${JAVA_REQUIRED_VERSION}...`);\n      }\n\n      return status === 0;\n    },\n  },\n];\nconst LOGGER_FIELDS = { buildPhase: 'setting up environment' };\nconst l = logger.child(LOGGER_FIELDS);\n\nexport default async function setup(sdkVersion?: string) {\n  await checkSystem(REQUIRED_TOOLS);\n  await prepareAndroidEnv();\n  if (sdkVersion) {\n    await ensureShellAppIsPresent(\n      sdkVersion,\n      { formatShellAppDirectory, formatShellAppTarballUriPath },\n      _shellAppPostDownloadAction,\n    );\n  }\n}\n\nasync function prepareAndroidEnv() {\n  await fs.ensureDir(config.directories.androidDependenciesDir);\n  const sdkConfig = await ensureAndroidSDKIsPresent();\n  _setEnvVars(sdkConfig.envVars);\n  _alterPath(sdkConfig.path);\n}\n\nfunction formatShellAppTarballUriPath(sdkMajorVersion: string) {\n  return path.join(config.directories.shellTarballsDir, PLATFORMS.ANDROID, `sdk${sdkMajorVersion}`);\n}\n\nasync function _shellAppPostDownloadAction(sdkVersion: string, workingdir: string) {\n  const inWorkingdir = (filename: string) => path.join(workingdir, filename);\n\n  if (await fs.pathExists(inWorkingdir('universe-package.json'))) {\n    // legacy shell app built from universe\n    await fs.move(inWorkingdir('package.json'), inWorkingdir('exponent-package.json'));\n    await fs.move(inWorkingdir('universe-package.json'), inWorkingdir('package.json'));\n    await _installNodeModules(workingdir);\n    await fs.move(inWorkingdir('package.json'), inWorkingdir('universe-package.json'));\n    await fs.move(inWorkingdir('exponent-package.json'), inWorkingdir('package.json'));\n  } else {\n    // new shell app built from expo or not\n    await _installNodeModules(workingdir);\n  }\n\n  // TODO: remove this after making sure that we don't need node_modules in tools-public for older sdks\n  if (ExponentTools.parseSdkMajorVersion(sdkVersion) < 33) {\n    const toolsPublicDir = path.join(workingdir, 'tools-public');\n    await _installNodeModules(toolsPublicDir);\n  }\n}\n\nasync function _installNodeModules(cwd: string) {\n  l.info(`installing dependencies in ${cwd} directory...`);\n  const command = await _shouldUseYarnOrNpm();\n  await ExponentTools.spawnAsyncThrowError(command, ['install'], {\n    pipeToLogger: true,\n    loggerFields: LOGGER_FIELDS,\n    cwd,\n  });\n  l.info('dependencies installed!');\n}\n\nasync function _shouldUseYarnOrNpm() {\n  try {\n    await which('yarn');\n    return 'yarn';\n  } catch (err) {\n    return 'npm';\n  }\n}\n\nfunction _setEnvVars(envVars: object) {\n  Object\n    .entries(envVars)\n    .forEach(([key, value]) => process.env[key] = value);\n}\n\nfunction _alterPath(newPaths: string[]) {\n  const currentPaths = process.env.PATH ? process.env.PATH.split(':') : [];\n  const paths = [...newPaths, ...currentPaths];\n  process.env.PATH = paths.join(':');\n}\n"]}