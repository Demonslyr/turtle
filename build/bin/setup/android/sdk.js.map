{"version":3,"file":"sdk.js","sourceRoot":"","sources":["../../../../src/bin/setup/android/sdk.ts"],"names":[],"mappings":"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","sourcesContent":["import os from 'os';\nimport path from 'path';\n\nimport { ExponentTools } from '@expo/xdl';\nimport decompress from 'decompress';\nimport fs from 'fs-extra';\n\nimport * as utils from 'turtle/bin/setup/utils/common';\nimport download from 'turtle/bin/setup/utils/downloader';\nimport config from 'turtle/config';\nimport logger from 'turtle/logger';\n\nconst ANDROID_SDK_URL = 'https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip';\n\nconst LOGGER_FIELDS = { buildPhase: 'setting up environment' };\nconst l = logger.child(LOGGER_FIELDS);\n\nexport default async function ensureAndroidSDKIsPresent() {\n  const androidSdkDir = path.join(config.directories.androidDependenciesDir, 'sdk');\n  await utils.removeDirectoryUnlessReady(androidSdkDir);\n  if (!(await fs.pathExists(androidSdkDir))) {\n    await fs.ensureDir(androidSdkDir);\n    const androidSdkDownloadPath = utils.formatArtifactDownloadPath(ANDROID_SDK_URL);\n\n    try {\n      l.info('Downloading Android SDK');\n      await fs.ensureDir(config.directories.artifactsDir);\n      await download(ANDROID_SDK_URL, androidSdkDownloadPath);\n      await fs.ensureDir(androidSdkDir);\n      l.info('Decompressing Android SDK');\n      await decompress(androidSdkDownloadPath, androidSdkDir);\n      await fs.remove(androidSdkDownloadPath);\n      l.info('Configuring Android SDK, this may take a while');\n      await _configureSdk(androidSdkDir);\n      await utils.markDirectoryAsReady(androidSdkDir);\n      l.info('Android SDK installed and configured successfully');\n    } catch (err) {\n      await fs.remove(androidSdkDir);\n      throw err;\n    } finally {\n      await fs.remove(androidSdkDownloadPath);\n    }\n  }\n  return {\n    envVars: _createEnvVars(androidSdkDir),\n    path: _createPaths(androidSdkDir),\n  };\n}\n\nasync function _configureSdk(androidSdkDir: string) {\n  // prevents warnings about missing repo config\n  const androidRepositoriesCfgPath = path.join(os.homedir(), '.android/repositories.cfg');\n  await fs.ensureFile(androidRepositoriesCfgPath);\n  await ExponentTools.spawnAsyncThrowError('./configureAndroidSdk.sh', [], {\n    pipeToLogger: true,\n    loggerFields: LOGGER_FIELDS,\n    cwd: path.join(config.directories.rootDir, 'scripts/android'),\n    env: {\n      ...process.env,\n      ANDROID_HOME: androidSdkDir,\n      ANDROID_SDK: androidSdkDir,\n    },\n  });\n}\n\nfunction _createEnvVars(androidSdkDir: string) {\n  return {\n    ANDROID_HOME: androidSdkDir,\n    ANDROID_SDK: androidSdkDir,\n  };\n}\n\nfunction _createPaths(androidSdkDir: string) {\n  return [\n    path.join(androidSdkDir, 'platform-tools'),\n    path.join(androidSdkDir, 'tools'),\n    path.join(androidSdkDir, 'tools/bin'),\n    path.join(androidSdkDir, 'build-tools/28.0.3'),\n  ];\n}\n"]}