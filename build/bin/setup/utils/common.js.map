{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../../src/bin/setup/utils/common.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\n\nimport { ExponentTools } from '@expo/xdl';\nimport fs from 'fs-extra';\nimport tar from 'tar';\n\nimport download from 'turtle/bin/setup/utils/downloader';\nimport { ensureToolsAreInstalled, IToolDefinition } from 'turtle/bin/setup/utils/toolsDetector';\nimport { IShellAppDirectoryConfig } from 'turtle/builders/utils/workingdir';\nimport config from 'turtle/config';\nimport logger from 'turtle/logger';\n\nconst l = logger.child({ buildPhase: 'setting up environment' });\n\ninterface IShellAppFormaters {\n  formatShellAppDirectory: (config: IShellAppDirectoryConfig) => string;\n  formatShellAppTarballUriPath: (sdkMajorVersion: string) => string;\n}\n\ntype PostDownloadAction = (sdkVersion: string, workingdir: string) => void;\n\nexport async function checkSystem(requiredTools: IToolDefinition[]) {\n  await ensureToolsAreInstalled(requiredTools);\n}\n\nexport async function ensureShellAppIsPresent(\n  sdkVersion: string,\n  formatters: IShellAppFormaters,\n  postDownloadAction?: PostDownloadAction,\n) {\n  const workingdir = formatters.formatShellAppDirectory({ sdkVersion });\n  const shellAppMetadata = await _readShellAppTarballS3Uri(sdkVersion, formatters);\n  await removeDirectoryUnlessReady(workingdir, shellAppMetadata);\n  if (await fs.pathExists(workingdir)) {\n    return;\n  }\n  l.info(`shell app for SDK ${sdkVersion} doesn't exist, downloading...`);\n  await _downloadShellApp(sdkVersion, workingdir, formatters);\n  if (postDownloadAction) {\n    await postDownloadAction(sdkVersion, workingdir);\n  }\n  await markDirectoryAsReady(workingdir, shellAppMetadata);\n}\n\nasync function _downloadShellApp(sdkVersion: string, targetDirectory: string, formatters: IShellAppFormaters) {\n  const shellAppTarballS3Uri = await _readShellAppTarballS3Uri(sdkVersion, formatters);\n  const tarballDownloadTargetPath = formatArtifactDownloadPath(shellAppTarballS3Uri);\n  await fs.ensureDir(config.directories.artifactsDir);\n  await download(shellAppTarballS3Uri, tarballDownloadTargetPath);\n  l.info('shell app has been downloaded');\n  await fs.ensureDir(targetDirectory);\n  l.info('extracting shell app (this may take a while)...');\n  await tar.x({\n    file: tarballDownloadTargetPath,\n    C: targetDirectory,\n  });\n  l.info('shell app extracted');\n}\n\nexport function formatArtifactDownloadPath(uri: string) {\n  const { base } = path.parse(uri);\n  return path.join(config.directories.artifactsDir, base);\n}\n\nasync function _readShellAppTarballS3Uri(sdkVersion: string, formatters: IShellAppFormaters) {\n  const sdkMajorVersion = ExponentTools.parseSdkMajorVersion(sdkVersion);\n  const filePath = formatters.formatShellAppTarballUriPath(sdkMajorVersion);\n  const data = await fs.readFile(filePath, 'utf8');\n  return data.trim();\n}\n\nexport async function removeDirectoryUnlessReady(dir: string, metadata?: string) {\n  const readyFilePath = path.join(dir, '.ready');\n  const readyFileExists = await fs.pathExists(readyFilePath);\n  let shouldRemove = false;\n  if (readyFileExists) {\n    if (metadata !== undefined) {\n      const readyFileContents = (await fs.readFile(readyFilePath, 'utf-8')).trim();\n      if (readyFileContents !== metadata) {\n        shouldRemove = true;\n       }\n    }\n  } else {\n    shouldRemove = true;\n  }\n  if (shouldRemove) {\n    await fs.remove(dir);\n  }\n}\n\nexport async function markDirectoryAsReady(dir: string, metadata?: string) {\n  const readyFilePath = path.join(dir, '.ready');\n  if (metadata === undefined) {\n    await fs.open(readyFilePath, 'w');\n  } else {\n    await fs.writeFile(readyFilePath, metadata);\n  }\n}\n"]}