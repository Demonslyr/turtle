{"version":3,"file":"toolsDetector.js","sourceRoot":"","sources":["../../../../src/bin/setup/utils/toolsDetector.ts"],"names":[],"mappings":";;;;;AAAA,gDAAwB;AACxB,kDAA2B;AAE3B,6DAAmC;AAEnC,MAAM,KAAK,GAAG,cAAI,CAAC,SAAS,CAAC,eAAM,CAAC,CAAC;AACrC,MAAM,CAAC,GAAG,gBAAM,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,wBAAwB,EAAE,CAAC,CAAC;AAS1D,KAAK,UAAU,uBAAuB,CAAC,KAAwB;IACpE,IAAI,gBAAgB,GAAG,KAAK,CAAC;IAC7B,KAAK,MAAM,EAAE,OAAO,EAAE,kBAAkB,EAAE,MAAM,EAAE,cAAc,EAAE,IAAI,KAAK,EAAE;QAC3E,IAAI;YACF,IAAI,MAAM,EAAE;gBACV,IAAI,CAAC,MAAM,MAAM,EAAE,EAAE;oBACnB,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;iBAC5D;aACF;iBAAM;gBACL,MAAM,KAAK,CAAC,OAAO,CAAC,CAAC;aACtB;SACF;QAAC,OAAO,GAAG,EAAE;YACZ,gBAAgB,GAAG,IAAI,CAAC;YACxB,IAAI,CAAC,MAAM,EAAE;gBACX,CAAC,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,OAAO,2BAA2B,CAAC,CAAC;aACzD;YACD,CAAC,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,kBAAkB,CAAC,CAAC;SACtC;QACD,IAAI,cAAc,EAAE;YAClB,IAAI;gBACF,MAAM,cAAc,EAAE,CAAC;aACxB;YAAC,OAAO,GAAG,EAAE;gBACZ,gBAAgB,GAAG,IAAI,CAAC;gBACxB,CAAC,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,oBAAoB,OAAO,YAAY,CAAC,CAAC;aAC3D;SACF;KACF;IACD,IAAI,gBAAgB,EAAE;QACpB,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;KACrG;AACH,CAAC;AA9BD,0DA8BC","sourcesContent":["import util from 'util';\nimport _which from 'which';\n\nimport logger from 'turtle/logger';\n\nconst which = util.promisify(_which);\nconst l = logger.child({ buildPhase: 'setting up environment' });\n\nexport interface IToolDefinition {\n  command: string;\n  missingDescription: string;\n  testFn?: () => Promise<boolean>;\n  versionCheckFn?: () => void;\n}\n\nexport async function ensureToolsAreInstalled(tools: IToolDefinition[]) {\n  let isAnyToolMissing = false;\n  for (const { command, missingDescription, testFn, versionCheckFn } of tools) {\n    try {\n      if (testFn) {\n        if (!await testFn()) {\n          throw new Error('Required tool is not properly installed');\n        }\n      } else {\n        await which(command);\n      }\n    } catch (err) {\n      isAnyToolMissing = true;\n      if (!testFn) {\n        l.error({ err }, `${command} is missing in your $PATH`);\n      }\n      l.error({ err }, missingDescription);\n    }\n    if (versionCheckFn) {\n      try {\n        await versionCheckFn();\n      } catch (err) {\n        isAnyToolMissing = true;\n        l.error({ err }, `wrong version of ${command} installed`);\n      }\n    }\n  }\n  if (isAnyToolMissing) {\n    throw new Error('Tools required to perform standalone app build are missing. Please install them.');\n  }\n}\n"]}