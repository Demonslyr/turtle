{"version":3,"file":"downloader.js","sourceRoot":"","sources":["../../../../src/bin/setup/utils/downloader.ts"],"names":[],"mappings":";;;;;AAAA,4CAAoB;AACpB,6BAA0B;AAE1B,wDAAmC;AACnC,sDAA8B;AAC9B,wEAA+C;AAE/C,MAAM,WAAW,GAAG,KAAK,CAAC;AAC1B,MAAM,mBAAmB,GAAG;IAC1B,QAAQ,EAAE,mCAAmC;IAC7C,GAAG,EAAE;QACH,aAAa,EAAE,GAAG;QAClB,eAAe,EAAE,GAAG;QACpB,KAAK,EAAE,EAAE;KACV;CACF,CAAC;AAEa,KAAK,UAAU,QAAQ,CAAC,GAAW,EAAE,QAAgB;IAClE,MAAM,OAAO,GAAG,GAAG,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IAC7E,IAAI,GAAgB,CAAC;IAErB,OAAO,IAAI,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QAC9B,0BAAe,CAAC,iBAAO,CAAC,OAAO,CAAC,CAAC;aAC9B,EAAE,CAAC,UAAU,EAAE,CAAC,KAAU,EAAE,EAAE;YAC3B,IAAI,CAAC,GAAG,EAAE;gBACR,GAAG,GAAG,IAAI,kBAAW,CAAC,mBAAmB,CAAC,QAAQ,EAAE;oBAClD,QAAQ,EAAE,mBAAmB,CAAC,GAAG,CAAC,aAAa;oBAC/C,UAAU,EAAE,mBAAmB,CAAC,GAAG,CAAC,eAAe;oBACnD,KAAK,EAAE,mBAAmB,CAAC,GAAG,CAAC,KAAK;oBACpC,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK;iBACxB,CAAC,CAAC;aACJ;YACD,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,GAAI,GAAW,CAAC,IAAI,CAAC,CAAC;QACzD,CAAC,CAAC;aACD,EAAE,CAAC,OAAO,EAAE,CAAC,GAAU,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;aACrC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;aACtB,IAAI,CAAC,YAAE,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;AACL,CAAC;AArBD,2BAqBC;AAED,SAAS,mBAAmB,CAAC,QAAgB;IAC3C,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,SAAG,CAAC,QAAQ,CAAC,CAAC;IACzE,IAAI,QAAQ,KAAK,WAAW,EAAE;QAC5B,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;KAC1C;IACD,OAAO,WAAW,QAAQ,oBAAoB,MAAM,EAAE,CAAC;AACzD,CAAC","sourcesContent":["import fs from 'fs';\nimport { URL } from 'url';\n\nimport ProgressBar from 'progress';\nimport request from 'request';\nimport requestProgress from 'request-progress';\n\nconst S3_PROTOCOL = 's3:';\nconst PROGRESS_BAR_CONFIG = {\n  TEMPLATE: 'downloading [:bar] :percent :etas',\n  BAR: {\n    COMPLETE_CHAR: '=',\n    INCOMPLETE_CHAR: ' ',\n    WIDTH: 20,\n  },\n};\n\nexport default async function download(url: string, destPath: string) {\n  const httpUrl = url.startsWith(S3_PROTOCOL) ? convertS3ToHttpsUrl(url) : url;\n  let bar: ProgressBar;\n\n  return new Promise((res, rej) => {\n    requestProgress(request(httpUrl))\n      .on('progress', (state: any) => {\n          if (!bar) {\n            bar = new ProgressBar(PROGRESS_BAR_CONFIG.TEMPLATE, {\n              complete: PROGRESS_BAR_CONFIG.BAR.COMPLETE_CHAR,\n              incomplete: PROGRESS_BAR_CONFIG.BAR.INCOMPLETE_CHAR,\n              width: PROGRESS_BAR_CONFIG.BAR.WIDTH,\n              total: state.size.total,\n            });\n          }\n          bar.tick(state.size.transferred - (bar as any).curr);\n      })\n      .on('error', (err: Error) => rej(err))\n      .on('end', () => res())\n      .pipe(fs.createWriteStream(destPath));\n  });\n}\n\nfunction convertS3ToHttpsUrl(s3UrlRaw: string) {\n  const { host: s3Bucket, pathname: s3Path, protocol } = new URL(s3UrlRaw);\n  if (protocol !== S3_PROTOCOL) {\n    throw new Error('Wrong S3 URL provided');\n  }\n  return `https://${s3Bucket}.s3.amazonaws.com${s3Path}`;\n}\n"]}