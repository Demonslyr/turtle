{"version":3,"file":"env.js","sourceRoot":"","sources":["../../src/bin/env.ts"],"names":[],"mappings":";;;;;AAAA,4CAAoB;AACpB,gDAAwB;AAExB,oDAAuB;AAEvB,sCAAuC;AAEvC,MAAM,UAAU,GAAG,GAAG,EAAE;IACtB,IAAI,SAAG,CAAC,YAAY,EAAE,GAAG,CAAC,KAAK,GAAG,EAAE;QAClC,OAAO,OAAO,CAAC;KAChB;SAAM,IAAI,SAAG,CAAC,cAAc,EAAE,GAAG,CAAC,KAAK,GAAG,EAAE;QAC3C,OAAO,SAAS,CAAC;KAClB;SAAM;QACL,OAAO,YAAY,CAAC;KACrB;AACH,CAAC,CAAC;AAEF,MAAM,UAAU,GAAG,UAAU,EAAE,CAAC;AAChC,MAAM,OAAO,GAAG,CAAC,OAAe,EAAE,EAAE,CAAC,OAAO,KAAK,OAAO,CAAC;AACzD,MAAM,SAAS,GAAG,CAAC,OAAe,EAAE,EAAE,CAAC,OAAO,KAAK,SAAS,CAAC;AAE7D,MAAM,SAAS,GAAG;IAChB,QAAQ,EAAE,OAAO;IACjB,QAAQ,EAAE,UAAU;IACpB,IAAI,EAAE,GAAG;CACV,CAAC;AAEF,IAAI,SAAS,CAAC,UAAU,CAAC,EAAE;IACzB,SAAS,CAAC,QAAQ,GAAG,kBAAkB,CAAC;CACzC;KAAM,IAAI,OAAO,CAAC,UAAU,CAAC,EAAE;IAC9B,SAAS,CAAC,QAAQ,GAAG,MAAM,CAAC;IAC5B,SAAS,CAAC,QAAQ,GAAG,WAAW,CAAC;IACjC,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC;CACvB;AAED,MAAM,gBAAgB,GAAG;IACvB,WAAW,EAAE,SAAS;IACtB,YAAY,EAAE,SAAS,CAAC,QAAQ;IAChC,YAAY,EAAE,SAAS,CAAC,QAAQ;IAChC,QAAQ,EAAE,SAAS,CAAC,IAAI;IACxB,kBAAkB,EAAE,GAAG;IACvB,sBAAsB,EAAE,cAAI,CAAC,IAAI,CAAC,YAAE,CAAC,OAAO,EAAE,EAAE,WAAW,CAAC;IAC5D,uBAAuB,EAAE,cAAI,CAAC,IAAI,CAAC,YAAE,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC;IACtE,kBAAkB,EAAE,GAAG;CACxB,CAAC;AAEF,SAAgB,cAAc;IAC5B,gBAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QACnC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC;AACL,CAAC;AAJD,wCAIC","sourcesContent":["import os from 'os';\nimport path from 'path';\n\nimport _ from 'lodash';\n\nimport { env } from 'turtle/utils/env';\n\nconst resolveEnv = () => {\n  if (env('EXPO_LOCAL', '0') === '1') {\n    return 'local';\n  } else if (env('EXPO_STAGING', '0') === '1') {\n    return 'staging';\n  } else {\n    return 'production';\n  }\n};\n\nconst currentEnv = resolveEnv();\nconst isLocal = (envName: string) => envName === 'local';\nconst isStaging = (envName: string) => envName === 'staging';\n\nconst apiConfig = {\n  protocol: 'https',\n  hostname: 'exp.host',\n  port: 443,\n};\n\nif (isStaging(currentEnv)) {\n  apiConfig.hostname = 'staging.exp.host';\n} else if (isLocal(currentEnv)) {\n  apiConfig.protocol = 'http';\n  apiConfig.hostname = 'localhost';\n  apiConfig.port = 3000;\n}\n\nconst OFFLINE_ENV_VARS = {\n  TURTLE_MODE: 'offline',\n  API_PROTOCOL: apiConfig.protocol,\n  API_HOSTNAME: apiConfig.hostname,\n  API_PORT: apiConfig.port,\n  TURTLE_FAKE_UPLOAD: '1',\n  TURTLE_FAKE_UPLOAD_DIR: path.join(os.homedir(), 'expo-apps'),\n  TURTLE_WORKING_DIR_PATH: path.join(os.homedir(), '.turtle/workingdir'),\n  EXPO_SKIP_SOURCING: '1',\n};\n\nexport function initOfflineEnv() {\n  _.map(OFFLINE_ENV_VARS, (val, key) => {\n    process.env[key] = String(val);\n  });\n}\n"]}