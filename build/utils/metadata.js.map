{"version":3,"file":"metadata.js","sourceRoot":"","sources":["../../src/utils/metadata.ts"],"names":[],"mappings":";;;;;AAAA,uDAAmC;AAEnC,mCAAiE;AAEjE,MAAM,eAAe,GAAG,CAAC,QAAmB,EAAE,EAAE,CAAC,GAAG,gBAAM,CAAC,aAAa,IAAI,QAAQ,EAAE,CAAC;AACvF,MAAM,qBAAqB,GAAG,CAAC,QAAmB,EAAE,EAAE,CAAC,GAAG,eAAe,CAAC,QAAQ,CAAC,eAAe,CAAC;AAE5F,KAAK,UAAU,eAAe,CAAC,aAAyB;IAC7D,MAAM,QAAQ,GAAG,aAAa,IAAI,gBAAM,CAAC,QAAQ,CAAC;IAClD,MAAM,KAAK,GAAG,MAAM,sBAAc,CAAC,mBAAW,CAAC,aAAa,CAAC,CAAC;IAC9D,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC,CAAC;IAChE,OAAO,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AACjD,CAAC;AALD,0CAKC","sourcesContent":["import config from 'turtle/config';\nimport { PLATFORMS } from 'turtle/constants';\nimport { getRedisClient, RedisClient } from 'turtle/utils/redis';\n\nconst createKeyPrefix = (platform: PLATFORMS) => `${config.deploymentEnv}:${platform}`;\nconst createReplicaCountKey = (platform: PLATFORMS) => `${createKeyPrefix(platform)}:replicaCount`;\n\nexport async function getReplicaCount(maybePlatform?: PLATFORMS) {\n  const platform = maybePlatform || config.platform;\n  const redis = await getRedisClient(RedisClient.Configuration);\n  const result = await redis.get(createReplicaCountKey(platform));\n  return result === null ? null : Number(result);\n}\n"]}