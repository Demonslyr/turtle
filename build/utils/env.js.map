{"version":3,"file":"env.js","sourceRoot":"","sources":["../../src/utils/env.ts"],"names":[],"mappings":";;AAAa,QAAA,GAAG,GAAG,CAAC,OAAe,EAAE,YAAkB,EAAE,EAAE;IACzD,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACpC,IAAI,CAAC,MAAM,EAAE;QACX,IAAI,YAAY,KAAK,SAAS,EAAE;YAC9B,OAAO,YAAY,CAAC;SACrB;aAAM,IAAI,SAAS,EAAE,EAAE;YACtB,wCAAwC;YACxC,OAAO,IAAI,CAAC;SACb;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,wBAAwB,OAAO,kBAAkB,CAAC,CAAC;SACpE;KACF;SAAM;QACL,OAAO,MAAM,CAAC;KACf;AACH,CAAC,CAAC;AACW,QAAA,WAAW,GAAG,CAAC,OAAe,EAAE,EAAE,CAAC,WAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AACtD,QAAA,YAAY,GAAG,CAAC,OAAe,EAAE,YAAiB,EAAE,EAAO,EAAE,EAAE,CAAC,EAAE,CAAC,WAAG,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC,CAAC;AAC/F,QAAA,MAAM,GAAG,CAAC,OAAe,EAAE,YAAqB,EAAE,EAAE,CAAC,QAAQ,CAAC,WAAG,CAAC,OAAO,EAAE,YAAY,CAAC,EAAE,EAAE,CAAC,CAAC;AAC9F,QAAA,UAAU,GAAG,CAAC,OAAe,EAAE,YAAsB,EAAE,EAAE;IACpE,IAAI,aAAa,CAAC;IAClB,IAAI,YAAY,KAAK,IAAI,EAAE;QACzB,aAAa,GAAG,MAAM,CAAC;KACxB;SAAM,IAAI,YAAY,KAAK,KAAK,EAAE;QACjC,aAAa,GAAG,OAAO,CAAC;KACzB;SAAM;QACL,aAAa,GAAG,YAAY,CAAC;KAC9B;IACD,OAAO,WAAG,CAAC,OAAO,EAAE,aAAa,CAAC,KAAK,MAAM,CAAC;AAChD,CAAC,CAAC;AAEF,MAAM,SAAS,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,KAAK,SAAS,CAAC","sourcesContent":["export const env = (varName: string, defaultValue?: any) => {\n  const envVar = process.env[varName];\n  if (!envVar) {\n    if (defaultValue !== undefined) {\n      return defaultValue;\n    } else if (isOffline()) {\n      // allow for null values in offline mode\n      return null;\n    } else {\n      throw new Error(`environment variable ${varName} isn't specified`);\n    }\n  } else {\n    return envVar;\n  }\n};\nexport const envOptional = (varName: string) => env(varName, null);\nexport const envTransform = (varName: string, defaultValue: any, fn: any) => fn(env(varName, defaultValue));\nexport const envNum = (varName: string, defaultValue?: number) => parseInt(env(varName, defaultValue), 10);\nexport const envBoolean = (varName: string, defaultValue?: boolean) => {\n  let defaultString;\n  if (defaultValue === true) {\n    defaultString = 'true';\n  } else if (defaultValue === false) {\n    defaultString = 'false';\n  } else {\n    defaultString = defaultValue;\n  }\n  return env(varName, defaultString) === 'true';\n};\n\nconst isOffline = () => process.env.TURTLE_MODE === 'offline';\n"]}