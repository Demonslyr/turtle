{"version":3,"file":"priorities.js","sourceRoot":"","sources":["../../src/utils/priorities.ts"],"names":[],"mappings":"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","sourcesContent":["import Joi from 'joi';\nimport isEqual from 'lodash/isEqual';\nimport os from 'os';\n\nimport config from 'turtle/config';\nimport logger from 'turtle/logger';\nimport { getRedisClient, RedisClient } from 'turtle/utils/redis';\n\nexport const NORMAL = 'normalPriority';\nexport const HIGH = 'highPriority';\n\nexport enum TurtleModeLabels {\n  Normal = 'normal',\n  High = 'high',\n  HighOnly = 'highOnly',\n}\n\nexport const NORMAL_CONFIGURATION = [NORMAL, HIGH];\nexport const HIGH_CONFIGURATION = [HIGH, NORMAL];\nexport const HIGH_ONLY_CONFIGURATION = [HIGH];\n\nconst REDIS_GET_CONFIG = `\n  local i = 0\n  local current\n  local configuration_index_key\n  while i < 20 do\n    configuration_index_key = KEYS[1]..\".\"..i\n    current = redis.call(\"get\", configuration_index_key)\n    if (current == false or current == KEYS[2]) then\n      break\n    end\n    i = i + 1\n  end\n  redis.call(\"setex\", configuration_index_key, 60 * 30, KEYS[2])\n  return i\n`;\nconst configSchema = Joi.array().required().items(Joi.string().only(NORMAL, HIGH));\n\nfunction configPrefix(platform: string) {\n  return `${config.deploymentEnv}:${platform}`;\n}\n\nexport function createConfigurationsKey(platform = config.platform) {\n  return `${configPrefix(platform)}:configurations`;\n}\n\nexport function createDefaultConfigurationKey(platform = config.platform) {\n  return `${configPrefix(platform)}:default`;\n}\n\nexport async function getPriorities() {\n  if (config.env === 'test' || config.deploymentEnv === 'development') {\n    return NORMAL_CONFIGURATION;\n  }\n\n  try {\n    const redis = await getRedisClient(RedisClient.Configuration);\n    if (redis.getConfig === undefined) {\n      redis.defineCommand('getConfig', {\n        numberOfKeys: 2,\n        lua: REDIS_GET_CONFIG,\n      });\n    }\n\n    try {\n      const configurations = await getConfiguration(redis);\n      const configurationsIndex = await redis.getConfig(createConfigurationsKey(), os.hostname());\n      logger.debug(`Using configuration at index ${configurationsIndex} pulled from redis`);\n      const { error, value: configValue } = configSchema.validate(configurations[configurationsIndex]);\n      if (error) {\n        logger.warn({ err: error });\n        throw new Error('Received configuration is not valid');\n      }\n      return configValue;\n    } catch (err) {\n      logger.warn({ err });\n      const defaultConfig = JSON.parse(await redis.get(createDefaultConfigurationKey()));\n      const { error, value: defaultConfigValue } = configSchema.validate(defaultConfig);\n      if (error) {\n        logger.warn({ err: error });\n        throw new Error('Received default configuration is not valid');\n      }\n      logger.warn('Using default configuration pulled from redis');\n      return defaultConfigValue;\n    }\n  } catch (err) {\n    logger.warn({ err }, 'Using configuration chosen locally');\n    if (Math.random() < 0.7) {\n      return HIGH_CONFIGURATION;\n    } else {\n      return NORMAL_CONFIGURATION;\n    }\n  }\n}\n\nasync function getConfiguration(currentRedisClient: any) {\n  const redis = currentRedisClient || await getRedisClient(RedisClient.Configuration);\n  return JSON.parse(await redis.get(createConfigurationsKey()));\n}\n\nexport async function getLabeledConfiguration(currentRedisClient?: any) {\n  const configuration = await getConfiguration(currentRedisClient);\n  return configuration.map((i: string[]) => {\n    if (isEqual(i, NORMAL_CONFIGURATION)) {\n      return TurtleModeLabels.Normal;\n    } else if (isEqual(i, HIGH_CONFIGURATION)) {\n      return TurtleModeLabels.High;\n    } else {\n      return TurtleModeLabels.HighOnly;\n    }\n  });\n}\n"]}