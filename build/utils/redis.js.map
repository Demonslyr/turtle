{"version":3,"file":"redis.js","sourceRoot":"","sources":["../../src/utils/redis.ts"],"names":[],"mappings":"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","sourcesContent":["import Redis from 'ioredis';\n\nimport config from 'turtle/config';\nimport logger from 'turtle/logger';\n\nconst MILLIS_TO_UPLOAD_LOGS = 3000;\nexport const MILLIS_CONNECTION_TIMEOUT = 10000;\n\nexport enum RedisClient {\n  Subscriber = 'REDIS_CLIENT_SUBSCRIBER',\n  Default = 'REDIS_CLIENT_DEFAULT',\n  Configuration = 'REDIS_CLIENT_CONFIGURATION',\n}\n\ninterface IClientConfig { [key: string]: string; }\n\nconst clientToUrl: IClientConfig = {\n  [RedisClient.Subscriber]: config.redis.url,\n  [RedisClient.Default]: config.redis.url,\n  [RedisClient.Configuration]: config.redis.configUrl,\n};\n\nexport function connect(timeoutMs: number, type: string): Promise<any> {\n  return new Promise((resolve, reject) => {\n    const redisClient = new Redis(clientToUrl[type], {\n      maxRetriesPerRequest: 2,\n    });\n    const timer = setTimeout(() => reject(new Error('Timeout at connecting to Redis')), timeoutMs);\n    redisClient.on('ready', () => {\n      clearTimeout(timer);\n      resolve(redisClient);\n    });\n    redisClient.on('error', (err: Error) => {\n      clearTimeout(timer);\n      reject(err);\n    });\n  });\n}\n\ninterface IRedisClients {\n  [key: string]: any;\n}\n\nconst redisClients: IRedisClients = {\n  [RedisClient.Subscriber]: null,\n  [RedisClient.Default]: null,\n  [RedisClient.Configuration]: null,\n};\n\nexport async function getRedisClient(type = RedisClient.Default) {\n  if (!redisClients[type]) {\n    try {\n      redisClients[type] = await connect(MILLIS_CONNECTION_TIMEOUT, type);\n    } catch (err) {\n      logger.error({ err });\n    }\n  }\n  return redisClients[type];\n}\n\nexport async function checkIfCancelled(jobId: string) {\n  try {\n    const redis = await getRedisClient();\n    return await redis.get(`jobs:cancelled:${jobId}`);\n  } catch (err) {\n    if (config.deploymentEnv === 'development') {\n      logger.warn('Did you turn on redis server? Run `yarn start-docker` in $EXPO_UNIVERSE_DIR/server/www');\n    }\n    logger.error({ err });\n    return false;\n  }\n}\n\nexport async function registerListener(jobId: string, deleteMessage: any) {\n  try {\n    const redis = await getRedisClient(RedisClient.Subscriber);\n    redis.subscribe('jobs:cancelled');\n    redis.on('message', async (_: any, message: any) => {\n      if (message === jobId) {\n        logger.info({ lastBuildLog: true }, 'Job cancelled - killing process');\n        await deleteMessage();\n        await logger.cleanup();\n        setTimeout(() => process.exit(1), MILLIS_TO_UPLOAD_LOGS);\n      }\n    });\n  } catch (err) {\n    logger.info('Couldn\\'t connect to Redis - job will be continued even if cancelled during build');\n    logger.error(err);\n  }\n}\n\nexport async function unregisterListeners() {\n  try {\n    const redis = await getRedisClient();\n    redis.removeAllListeners('message');\n  } catch (err) {\n    logger.error(err);\n  }\n}\n"]}