{"version":3,"file":"config.js","sourceRoot":"","sources":["../src/config.ts"],"names":[],"mappings":"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","sourcesContent":["import os from 'os';\nimport path from 'path';\n\nimport { PLATFORMS } from 'turtle/constants';\nimport { env, envBoolean, envNum, envOptional, envTransform } from 'turtle/utils/env';\n\nexport default {\n  env: env('NODE_ENV'),\n  hostname: env('HOSTNAME', os.hostname()),\n  deploymentEnv: env('ENVIRONMENT'),\n  platform: env('PLATFORM', PLATFORMS.IOS) as PLATFORMS,\n  aws: {\n    accessKeyId: env('AWS_ACCESS_KEY_ID'),\n    secretAccessKey: env('AWS_SECRET_ACCESS_KEY'),\n  },\n  s3: {\n    bucket: env('AWS_S3_BUCKET'),\n    region: env('AWS_S3_REGION'),\n  },\n  sqs: {\n    region: env('AWS_SQS_REGION'),\n    queues: {\n      normalPriority: {\n        ios: env('AWS_SQS_IOS_QUEUE_URL'),\n        android: env('AWS_SQS_ANDROID_QUEUE_URL'),\n      },\n      highPriority: {\n        ios: env('AWS_SQS_IOS_PRIORITY_QUEUE_URL'),\n        android: env('AWS_SQS_ANDROID_PRIORITY_QUEUE_URL'),\n      },\n      out: env('AWS_SQS_OUT_QUEUE_URL'),\n    },\n  },\n  cloudwatch: {\n    region: env('AWS_CLOUDWATCH_REGION'),\n    disabled: envTransform('AWS_CLOUDWATCH_DISABLED', '0', (val: string) => val === '1'),\n    intervalMs: envNum('AWS_CLOUDWATCH_INTERVAL_MS', 30000),\n    namespace: env('AWS_CLOUDWATCH_NAMESPACE', 'Turtle'),\n  },\n  datadog: {\n    disabled: envBoolean('DATADOG_DISABLED', false),\n    apiKey: envOptional('DATADOG_API_KEY'),\n    appKey: envOptional('DATADOG_APP_KEY'),\n    intervalMs: env('DATADOG_INTERVAL_MS', 5 * 60 * 1000),\n  },\n  redis: {\n    url: env('REDIS_URL'),\n    configUrl: env('REDIS_CONFIG_URL'),\n  },\n  logger: {\n    level: env('LOGGER_LEVEL', 'info'),\n    intervalMs: envNum('LOGGER_INTERVAL_MS', 5000),\n  },\n  google: {\n    credentials: env('GOOGLE_APPLICATION_CREDENTIALS', ''),\n  },\n  sentry: {\n    dsn: env('SENTRY_DSN', ''),\n  },\n  api: {\n    protocol: env('API_PROTOCOL'),\n    hostname: env('API_HOSTNAME'),\n    port: envNum('API_PORT'),\n  },\n  builder: {\n    mode: env('TURTLE_MODE', 'online'),\n    skipCleanup: envTransform(\n      'TURTLE_SKIP_CLEANUP',\n      '0',\n      (val: string) => env('NODE_ENV') === 'development' && val === '1',\n    ),\n    fakeUpload: envTransform('TURTLE_FAKE_UPLOAD', '0', (val: string) => val === '1'),\n    maxJobTimeMs: envNum('TURTLE_MAX_JOB_TIME_MS', 15 * 60 * 1000),\n    useLocalWorkingDir: envTransform('TURTLE_USE_LOCAL_WORKING_DIR', '0', (val: string) => val === '1'),\n  },\n  directories: {\n    rootDir: env('TURTLE_ROOT_DIR_PATH', path.join(__dirname, '..')),\n    workingDir: env('TURTLE_WORKING_DIR_PATH', path.join(__dirname, '../workingdir')),\n    shellTarballsDir: env('TURTLE_SHELL_TARBALLS_DIR', path.join(__dirname, '../shellTarballs')),\n    artifactsDir: env('TURTLE_ARTIFACTS_DIR', path.join(__dirname, '../artifacts')),\n    androidDependenciesDir: env(\n      'TURTLE_ANDROID_DEPENDENCIES_DIR',\n      path.join(os.homedir(), '.turtle/androidDependencies'),\n      ),\n    tempS3LogsDir: env('TURTLE_TEMP_S3_LOGS_DIR', '/tmp/logs'),\n    fakeUploadDir: envOptional('TURTLE_FAKE_UPLOAD_DIR'),\n    temporaryFilesRoot: env(\n      'TURTLE_TEMPORARY_FILES_DIR',\n      path.join(os.platform() === 'darwin' ? '/private' : '/', 'tmp', 'turtle'),\n    ),\n  },\n  www: {\n    sdkVersionsSecretToken: env('TURTLE_SDK_VERSIONS_SECRET_TOKEN'),\n  },\n};\n"]}