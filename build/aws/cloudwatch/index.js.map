{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/aws/cloudwatch/index.ts"],"names":[],"mappings":"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","sourcesContent":["import aws from 'aws-sdk';\nimport _ from 'lodash';\n\nimport { EXTRA_DIMENSIONS, GROUP_HASH } from 'turtle/aws/cloudwatch/constants';\nimport calculateStatistics from 'turtle/aws/cloudwatch/statistics';\nimport {\n  IMetric,\n  IMetricConfiguration,\n  IMetricData,\n  IMetricsChunk,\n  MetricRegistrationObject,\n} from 'turtle/aws/cloudwatch/types';\nimport config from 'turtle/config';\nimport logger from 'turtle/logger';\n\ninterface IState {\n  metrics: IMetric[];\n  registeredMetrics: {\n    [key: string]: IMetricConfiguration;\n  };\n  intervalId: NodeJS.Timer | null;\n}\n\nconst SUCCESS_SUFFIX = '.success';\nconst FAIL_SUFFIX = '.fail';\nconst CHUNK_SIZE = 20;\n\nconst state: IState = {\n  metrics: [],\n  registeredMetrics: {},\n  intervalId: null,\n};\n\nconst cloudWatch = new aws.CloudWatch({\n  apiVersion: '2010-08-01',\n  region: config.cloudwatch.region,\n  accessKeyId: config.aws.accessKeyId,\n  secretAccessKey: config.aws.secretAccessKey,\n});\n\nexport function init() {\n  if (config.cloudwatch.disabled) {\n    return;\n  }\n\n  state.intervalId = setInterval(_dumpMetrics, config.cloudwatch.intervalMs);\n}\n\nexport function addMetricData({\n  name,\n  value,\n  success = true,\n  explicitName = false,\n  extraDimensions = [],\n}: IMetricData) {\n  if (config.cloudwatch.disabled) {\n    return;\n  }\n\n  const metricName = explicitName ? name : _createMetricName(name, success);\n  const registeredMetric = state.registeredMetrics[metricName];\n  if (!registeredMetric) {\n    return;\n  }\n  const { unit } = registeredMetric;\n  const metric: IMetric = {\n    MetricName: metricName,\n    Unit: unit,\n    Value: value,\n    Timestamp: new Date(),\n    [EXTRA_DIMENSIONS]: extraDimensions,\n    [GROUP_HASH]: _calculateGroupHash(metricName, extraDimensions),\n  };\n  state.metrics.push(metric);\n}\n\nexport function registerMetric({\n  metricName,\n  unit,\n  reducer,\n  dimensions = [],\n  statistics = false,\n  addEmpty = true,\n  explicitName = false,\n}: MetricRegistrationObject) {\n  if (config.cloudwatch.disabled) {\n    return;\n  }\n\n  const successMetricName = _createMetricName(metricName, true, explicitName);\n  state.registeredMetrics[successMetricName] = { unit, statistics, reducer, addEmpty, dimensions };\n  if (!explicitName) {\n    const failMetricName = _createMetricName(metricName, false);\n    state.registeredMetrics[failMetricName] = { unit, statistics, reducer, addEmpty, dimensions };\n  }\n}\n\nfunction _createMetricName(name: string, success: boolean, explicitName?: boolean) {\n  if (explicitName) {\n    return name;\n  } else {\n    const suffix = success ? SUCCESS_SUFFIX : FAIL_SUFFIX;\n    return `${name}${suffix}`;\n  }\n}\n\nfunction _calculateGroupHash(metricName: string, extraDimensions: any[]) {\n  const dimString = _.flatten(extraDimensions)\n    .map(({ Name, Value }) => `,${Name}:${Value}`)\n    .join('');\n  return `${metricName}${dimString}`;\n}\n\nfunction _dumpMetrics() {\n  if (!state.metrics.length && Object.keys(state.registeredMetrics).length < 0) {\n    // empty metrics list, skipping\n    return;\n  }\n\n  logger.trace(\n    '[cloudwatch] lenghts for state.metrics=%d, state.registeredMetrics=%d',\n    state.metrics.length,\n    Object.keys(state.registeredMetrics).length,\n  );\n\n  _addEmptyMetrics(state.metrics);\n  const formattedMetrics = _formatMetrics(state.metrics);\n  _pushMetrics(formattedMetrics);\n\n  state.metrics = [];\n}\n\nfunction _addEmptyMetrics(metrics: IMetric[]) {\n  const seenMetrics = metrics.reduce((acc, i) => {\n    if (!acc.has(i.MetricName)) {\n      acc.add(i.MetricName);\n    }\n    return acc;\n  }, new Set());\n\n  const nonEmptyMetrics = _.omitBy(state.registeredMetrics, ({ addEmpty }) => !addEmpty);\n  const toAdd = _.difference(Object.keys(nonEmptyMetrics), Array.from(seenMetrics));\n  toAdd.forEach((name) => addMetricData({ name, value: 0, explicitName: true }));\n}\n\nfunction _formatMetrics(metrics: IMetric[]) {\n  const reducedMetrics = _reduceMetrics(metrics);\n  const metricsWithDimensions = reducedMetrics.map((metric) => {\n    const { dimensions } = state.registeredMetrics[metric.MetricName];\n    const joinedDimensions = [...dimensions, ...metric[EXTRA_DIMENSIONS]];\n    return joinedDimensions.map((i) => Object.assign({}, metric, { Dimensions: i }));\n  });\n  const metricData = _.flatten(metricsWithDimensions);\n  const chunks = _.chunk(metricData, CHUNK_SIZE);\n  return chunks.map((chunk) => ({\n    Namespace: config.cloudwatch.namespace,\n    MetricData: chunk,\n  }));\n}\n\nfunction _reduceMetrics(metrics: IMetric[]) {\n  const grouped = _.groupBy(metrics, GROUP_HASH);\n  return _.reduce(\n    grouped,\n    (acc: IMetric[], val: any) => {\n      const { MetricName: key } = val[0] as IMetric;\n      const { reducer, statistics } = state.registeredMetrics[key];\n      const reduced = reducer ? reducer(val) : val;\n      const withStats = statistics ? calculateStatistics(reduced) : reduced;\n      acc.push(...withStats);\n      return acc;\n    },\n    [],\n  );\n}\n\nfunction _pushMetrics(metrics: IMetricsChunk[]) {\n  logger.trace('[cloudwatch] pushing metrics', JSON.stringify(metrics, null, '\\t'));\n  metrics.forEach((metricsChunk) => {\n    cloudWatch.putMetricData(metricsChunk, (err) => {\n      if (err) {\n        logger.warn({ err }, '[cloudwatch]');\n      }\n    });\n  });\n}\n"]}