{"version":3,"file":"statistics.js","sourceRoot":"","sources":["../../../src/aws/cloudwatch/statistics.ts"],"names":[],"mappings":";;AAEA,SAAwB,mBAAmB,CAAC,OAAkB;IAC5D,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;QACnB,OAAO,EAAE,CAAC;KACX;IAED,MAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,GAA2B,EAAE,CAAU,EAAE,EAAE;QACzE,IAAI,MAAM,GAAG,GAAG,CAAC;QACjB,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,EAAE;gBAC5B,eAAe,EAAE;oBACf,OAAO,EAAE,CAAC,QAAQ;oBAClB,OAAO,EAAE,QAAQ;oBACjB,WAAW,EAAE,CAAC;oBACd,GAAG,EAAE,GAAG;iBACT;gBACD,KAAK,EAAE,SAAS;aACjB,CAAC,CAAC;SACJ;QAED,MAAM,CAAC,eAAe,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;QACnF,MAAM,CAAC,eAAe,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;QACnF,MAAM,CAAC,eAAe,CAAC,WAAW,IAAI,CAAC,CAAC;QACxC,MAAM,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,CAAC,KAAK,CAAC;QACtC,OAAO,MAAM,CAAC;IAChB,CAAC,EAAE,IAAI,CAAC,CAAC;IACT,OAAO,CAAC,OAAO,CAAC,CAAC;AACnB,CAAC;AA1BD,sCA0BC","sourcesContent":["import { IMetric, MetricWithStats } from 'turtle/aws/cloudwatch/types';\n\nexport default function calculateStatistics(metrics: IMetric[]) {\n  if (!metrics.length) {\n    return [];\n  }\n\n  const reduced = metrics.reduce((acc: MetricWithStats | null, i: IMetric) => {\n    let result = acc;\n    if (!result) {\n      result = Object.assign({}, i, {\n        StatisticValues: {\n          Maximum: -Infinity,\n          Minimum: Infinity,\n          SampleCount: 0,\n          Sum: 0.0,\n        },\n        Value: undefined,\n      });\n    }\n\n    result.StatisticValues.Maximum = Math.max(result.StatisticValues.Maximum, i.Value);\n    result.StatisticValues.Minimum = Math.min(result.StatisticValues.Minimum, i.Value);\n    result.StatisticValues.SampleCount += 1;\n    result.StatisticValues.Sum += i.Value;\n    return result;\n  }, null);\n  return [reduced];\n}\n"]}