{"version":3,"file":"sqs.js","sourceRoot":"","sources":["../../src/aws/sqs.ts"],"names":[],"mappings":"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","sourcesContent":["import retry from 'async-retry';\nimport AWS from 'aws-sdk';\nimport _ from 'lodash';\n\nimport { OUTPUT_QUEUE_URL, QUEUE_URL } from 'turtle/aws/utils';\nimport config from 'turtle/config';\nimport { JOB_UPDATE_TYPE } from 'turtle/constants/build';\nimport logger from 'turtle/logger';\nimport { getCurrentJobId } from 'turtle/turtleContext';\n\nconst sqs = new AWS.SQS({\n  apiVersion: '2012-11-05',\n  ..._.pick(config.aws, ['accessKeyId', 'secretAccessKey']),\n  ..._.pick(config.sqs, ['region']),\n});\n\nconst VISIBILITY_TIMEOUT_SEC = 30;\n\nexport async function receiveMessage(priority: string) {\n  const params = {\n    MaxNumberOfMessages: 1,\n    QueueUrl: QUEUE_URL(priority),\n    VisibilityTimeout: VISIBILITY_TIMEOUT_SEC,\n  };\n  return await retry(() => {\n    return sqs\n      .receiveMessage(params)\n      .promise()\n      .then((data) => {\n        if (data.Messages) {\n          logger.info(`Received a message`);\n          return data.Messages[0];\n        } else {\n          logger.debug(`No messages received [${priority}]`);\n          return null;\n        }\n      })\n      .catch((err) => {\n        logger.error({ err }, 'Receive error');\n        throw err;\n      });\n  });\n}\n\nexport async function deleteMessage(priority: string, receiptHandle: string) {\n  const params = {\n    QueueUrl: QUEUE_URL(priority),\n    ReceiptHandle: receiptHandle,\n  };\n  return await retry(() => {\n    return sqs.deleteMessage(params).promise();\n  });\n}\n\nexport async function changeMessageVisibility(priority: string, receiptHandle: string) {\n  const params = {\n    QueueUrl: QUEUE_URL(priority),\n    ReceiptHandle: receiptHandle,\n    VisibilityTimeout: VISIBILITY_TIMEOUT_SEC,\n  };\n  return sqs.changeMessageVisibility(params).promise();\n}\n\n// Every VISIBILITY_TIMEOUT_SEC / 3 seconds we are telling AWS SQS\n// that we're still processing the message, so it does not\n// send the build job to another turtle agent\nexport function changeMessageVisibilityRecurring(priority: string, receiptHandle: string, jobId: string) {\n  return setInterval(() => {\n    if (getCurrentJobId() === jobId) {\n      changeMessageVisibility(priority, receiptHandle).catch((err) => {\n        logger.warn({ err }, 'Error at change msg visibility');\n      });\n    }\n  }, (VISIBILITY_TIMEOUT_SEC * 1000) / 3);\n}\n\nexport async function sendMessage(jobId: string, status: JOB_UPDATE_TYPE, data = {}) {\n  const params = {\n    MessageBody: JSON.stringify({ jobId, status, ...data }),\n    QueueUrl: OUTPUT_QUEUE_URL(),\n    DelaySeconds: 0,\n    MessageGroupId: jobId,\n  };\n  try {\n    return await retry(async () => {\n      return await sqs.sendMessage(params).promise();\n    });\n  } catch (err) {\n    logger.error({ err }, `Error sending SQS message: ${JSON.stringify(params)}}`);\n  }\n}\n"]}