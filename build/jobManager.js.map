{"version":3,"file":"jobManager.js","sourceRoot":"","sources":["../src/jobManager.ts"],"names":[],"mappings":"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","sourcesContent":["import _ from 'lodash';\n\nimport * as sqs from 'turtle/aws/sqs';\nimport builders from 'turtle/builders';\nimport BuildError from 'turtle/builders/BuildError';\nimport { logErrorOnce } from 'turtle/builders/utils/common';\nimport config from 'turtle/config';\nimport { BUILD } from 'turtle/constants/index';\nimport logger from 'turtle/logger';\nimport * as buildDurationMetric from 'turtle/metrics/buildDuration';\nimport * as buildStatusMetric from 'turtle/metrics/buildStatus';\nimport { checkShouldExit, setCurrentJobId, turtleVersion } from 'turtle/turtleContext';\nimport { getPriorities } from 'turtle/utils/priorities';\nimport * as redis from 'turtle/utils/redis';\nimport { sanitizeJob } from 'turtle/validator';\n\nfunction _maybeExit() {\n  if (checkShouldExit()) {\n    logger.warn('Exiting due to previously received termination signal.');\n    process.exit();\n  }\n}\n\nexport async function doJob() {\n  const jobData = await getJob();\n  await processJob(jobData);\n  _maybeExit();\n}\n\nexport async function getJob() {\n  _maybeExit();\n  logger.info('Fetching job');\n  while (true) {\n    try {\n      let job = null;\n      const priorities = await getPriorities();\n      for (const priority of priorities) {\n        job = await sqs.receiveMessage(priority);\n        _maybeExit();\n        if (job != null) {\n          job.priority = priority;\n          break;\n        }\n      }\n      _maybeExit();\n      if (job !== null) {\n        return job;\n      }\n    } catch (err) {\n      logger.error({ err }, 'Error at receiving messages');\n    }\n  }\n}\n\nasync function processJob(jobData: any) {\n  const receiptHandle = jobData.ReceiptHandle;\n  const { priority } = jobData;\n\n  let timeoutId;\n  try {\n    let rawJob;\n    let job;\n    try {\n      rawJob = JSON.parse(jobData.Body);\n      timeoutId = failAfterMaxJobTime(priority, receiptHandle, rawJob);\n      logger.info(\n        { buildJobId: rawJob.id, messageId: jobData.MessageId },\n        `Processing job with priority=${priority.slice(0, priority.length - 8)} timestamp=${Date.now()}`,\n      );\n      job = await sanitizeJob(rawJob);\n    } catch (err) {\n      logger.error({ err, ...rawJob && { buildJobId: rawJob.id } }, 'The build job is invalid');\n      // send message only if we've managed to parse the job json\n      if (rawJob) {\n        await sqs.sendMessage(rawJob.id, BUILD.JOB_STATES.ERRORED, {\n          turtleVersion,\n          buildDuration: 0,\n          reason: 'The build job is invalid',\n        });\n      }\n      throw err;\n    }\n    setCurrentJobId(job.id);\n    const pingerHandle = sqs.changeMessageVisibilityRecurring(priority, jobData.ReceiptHandle, job.id);\n\n    const cancelled = await redis.checkIfCancelled(job.id);\n    if (cancelled) {\n      logger.info('The job has been cancelled');\n    } else {\n      redis.registerListener(job.id, () => deleteMessage(priority, receiptHandle));\n      const startTimestamp = Date.now();\n      let buildFailed = false;\n      const buildType = _.get(job, 'config.buildType', 'default');\n      try {\n        const status = await build(job);\n        buildStatusMetric.add(buildType, priority, status);\n        buildFailed = !status;\n      } catch (err) {\n        buildStatusMetric.add(buildType, priority, false);\n        buildFailed = true;\n        throw err;\n      } finally {\n        const endTimestamp = Date.now();\n        const turtleBuildDurationSecs = Math.ceil((endTimestamp - startTimestamp) / 1000);\n        logger.info(`BuildID=${job.id} Build duration=${turtleBuildDurationSecs}`);\n        buildDurationMetric.addTurtleDuration(buildType, turtleBuildDurationSecs, !buildFailed);\n        if (job.messageCreatedTimestamp) {\n          const totalBuildDurationSecs = Math.ceil(\n            (endTimestamp - job.messageCreatedTimestamp) / 1000,\n          );\n          buildDurationMetric.addTotalDuration(buildType, totalBuildDurationSecs, !buildFailed);\n        }\n        redis.unregisterListeners();\n      }\n      logger.info(`Job done MessageId=${jobData.MessageId} BuildId=${job.id} ${Date.now()}`);\n    }\n    clearInterval(pingerHandle);\n  } finally {\n    await deleteMessage(priority, receiptHandle);\n    if (timeoutId) {\n      logger.info('Clearing job failer timeout...');\n      clearTimeout(timeoutId);\n    }\n  }\n}\n\nfunction failAfterMaxJobTime(priority: string, receiptHandle: string, job: any) {\n  return setTimeout(async () => {\n    try {\n      sqs.sendMessage(job.id, BUILD.JOB_STATES.ERRORED, { turtleVersion });\n      await deleteMessage(priority, receiptHandle);\n    } finally {\n      logger.error('Build timed out. Going to terminate turtle agent.');\n      await logger.cleanup();\n      process.exit(1);\n    }\n  }, config.builder.maxJobTimeMs);\n}\n\nasync function build(job: any) {\n  const startTimestamp = Date.now();\n  const s3Url = await logger.initForJob(job);\n  const calculateBuildDuration = () => Math.ceil((Date.now() - startTimestamp) / 1000);\n\n  try {\n    await sqs.sendMessage(job.id, BUILD.JOB_STATES.IN_PROGRESS, {\n      logUrl: s3Url,\n      logFormat: 'json',\n    });\n    const result = await (builders as any)[job.platform](job);\n    const buildDuration = calculateBuildDuration();\n    sqs.sendMessage(job.id, BUILD.JOB_STATES.FINISHED, {\n      ...result,\n      turtleVersion,\n      buildDuration,\n    });\n    return true;\n  } catch (err) {\n    logErrorOnce(err);\n    const buildDuration = calculateBuildDuration();\n    let reason;\n    if (err instanceof BuildError) {\n      reason = err.reason;\n    }\n    sqs.sendMessage(job.id, BUILD.JOB_STATES.ERRORED, {\n      turtleVersion,\n      buildDuration,\n      ...reason && { reason },\n    });\n    return false;\n  } finally {\n    await logger.cleanup();\n  }\n}\n\nasync function deleteMessage(priority: string, receiptHandle: string) {\n  try {\n    setCurrentJobId(null);\n    await sqs.deleteMessage(priority, receiptHandle);\n  } catch (err) {\n    logger.error({ err }, 'Error at deleting msg');\n  }\n}\n"]}